!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=6)}([function(t,e,r){var n=r(1),o=r(2);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var i={insert:"head",singleton:!1};n(o,i);t.exports=o.locals||{}},function(t,e,r){"use strict";var n,o=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},i=function(){var t={};return function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}t[e]=r}return t[e]}}(),u=[];function a(t){for(var e=-1,r=0;r<u.length;r++)if(u[r].identifier===t){e=r;break}return e}function c(t,e){for(var r={},n=[],o=0;o<t.length;o++){var i=t[o],c=e.base?i[0]+e.base:i[0],s=r[c]||0,f="".concat(c," ").concat(s);r[c]=s+1;var l=a(f),y={css:i[1],media:i[2],sourceMap:i[3]};-1!==l?(u[l].references++,u[l].updater(y)):u.push({identifier:f,updater:v(y,e),references:1}),n.push(f)}return n}function s(t){var e=document.createElement("style"),n=t.attributes||{};if(void 0===n.nonce){var o=r.nc;o&&(n.nonce=o)}if(Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),"function"==typeof t.insert)t.insert(e);else{var u=i(t.insert||"head");if(!u)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");u.appendChild(e)}return e}var f,l=(f=[],function(t,e){return f[t]=e,f.filter(Boolean).join("\n")});function y(t,e,r,n){var o=r?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(t.styleSheet)t.styleSheet.cssText=l(e,o);else{var i=document.createTextNode(o),u=t.childNodes;u[e]&&t.removeChild(u[e]),u.length?t.insertBefore(i,u[e]):t.appendChild(i)}}function p(t,e,r){var n=r.css,o=r.media,i=r.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var h=null,b=0;function v(t,e){var r,n,o;if(e.singleton){var i=b++;r=h||(h=s(e)),n=y.bind(null,r,i,!1),o=y.bind(null,r,i,!0)}else r=s(e),n=p.bind(null,r,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(r)};return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=o());var r=c(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var n=0;n<r.length;n++){var o=a(r[n]);u[o].references--}for(var i=c(t,e),s=0;s<r.length;s++){var f=a(r[s]);0===u[f].references&&(u[f].updater(),u.splice(f,1))}r=i}}}},function(t,e,r){var n=r(3),o=r(4),i=r(5);e=n(!1);var u=o(i);e.push([t.i,'@font-face {\r\n  font-family: "Cadence";\r\n  src: url('+u+') format("woff");\r\n  font-weight: normal;\r\n  font-style: normal;\r\n}\r\n',""]),t.exports=e},function(t,e,r){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r=function(t,e){var r=t[1]||"",n=t[3];if(!n)return r;if(e&&"function"==typeof btoa){var o=(u=n,a=btoa(unescape(encodeURIComponent(JSON.stringify(u)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(c," */")),i=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[r].concat(i).concat([o]).join("\n")}var u,a,c;return[r].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(r,"}"):r})).join("")},e.i=function(t,r,n){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(n)for(var i=0;i<this.length;i++){var u=this[i][0];null!=u&&(o[u]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);n&&o[c[0]]||(r&&(c[2]?c[2]="".concat(r," and ").concat(c[2]):c[2]=r),e.push(c))}},e}},function(t,e,r){"use strict";t.exports=function(t,e){return e||(e={}),"string"!=typeof(t=t&&t.__esModule?t.default:t)?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t)}},function(t,e,r){"use strict";r.r(e),e.default="data:font/woff;base64,"},function(t,e,r){"use strict";r.r(e);var n=[].concat,o=function(t){return n.apply([],t)},i=function(t,e){return new Array(e+1).join(t)},u=function(t){return t[t.length-1]},a=function(t){return Math.min.apply(null,t)},c=function(t){return Math.max.apply(null,t)},s=function(t){return t.reduce((function(t,e){return t+e}))},f=function(t,e){void 0===e&&(e=t,t=0);for(var r=[],n=t;n<e;n++)r.push(n);return r},l=function(t){for(var e=[],r=0;r<t;r++)e.push(0);return e},y=function(t){var e={};return t.forEach((function(t){e[t]=!0})),e},p=function(t){return e=y(t),Object.keys(e);var e},h=function(t){var e={};for(var r in t)e[t[r]]=r;return e},b=[].slice;function v(){var t=["name"].concat(b.apply(arguments));return function(){var e=this,r={};return t.forEach((function(t){r[t]=e[t]})),r}}var m,d=function(t,e,r){var n=document.createElementNS("http://www.w3.org/2000/svg",t);for(var o in e)n.setAttribute(o,e[o]);return r.appendChild?n.appendChild(r):n.textContent=r,n},g={},w=function(t,e){var r=t+e;if(g[r])return g[r];!function(){if(m)return m;m=d("text",{x:0,y:50},"");var t=d("svg",{width:0,height:0},m);document.body.appendChild(t)}();var n="font-family: ".concat(t.family,"; font-size: ").concat(t.size);m.setAttribute("style",n),m.textContent=e;var o=m.getBBox(),i={width:o.width,height:o.height};return g[r]=i,i};function O(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function S(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?O(Object(r),!0).forEach((function(e){j(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):O(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function j(t,e,r){return(e=E(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function P(t){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function k(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function L(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,E(n.key),n)}}function x(t,e,r){return e&&L(t.prototype,e),r&&L(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function E(t){var e=function(t,e){if("object"!==P(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==P(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===P(e)?e:String(e)}var R=function(){function t(e){k(this,t),this.data=e.split("\n"),this.ln=-1,this.nextLine()}return x(t,[{key:"eof",get:function(){return this.ln===this.data.length-1&&this.line.eol}},{key:"nextLine",value:function(){this.ln++,this.line=new T(this.data[this.ln])}}]),t}(),T=function(){function t(e){k(this,t),this.str=e,this.rest=e,this.col=0}return x(t,[{key:"eol",get:function(){return 0===this.rest.length}},{key:"advance",value:function(t){this.col+=t,this.rest=this.rest.substr(t)}}]),t}(),D={S:" ",SS:" +"};function A(t){return function(){function e(r){k(this,e),this.name="lexer",this.src=r.replace(/\r\n/g,"\n"),this.lines=new R(this.src);var n=function(t){t=S(S({},D),t);var e=[{},{}];for(var r in t)e[0][r]=new RegExp(t[r]),e[1][r]=new RegExp("^"+t[r]);return e}(t);this.withoutPatterns=n[0],this.patterns=n[1]}return x(e,[{key:"line",get:function(){return this.lines.line}},{key:"ln",get:function(){return this.lines.ln}},{key:"col",get:function(){return this.line.col}},{key:"eol",get:function(){return this.line.eol}},{key:"eof",get:function(){return this.lines.eof}},{key:"nextLine",value:function(){this.lines.nextLine()}},{key:"getPattern",value:function(t){if(t in this.patterns)return this.patterns[t];this.error("Undefined token [".concat(t,"]"))}},{key:"getWithoutPattern",value:function(t){if(t in this.withoutPatterns)return this.withoutPatterns[t];this.error("Undefined token [".concat(t,"]"))}},{key:"eat",value:function(t){var e=this.line.rest.match(this.getPattern(t));e||this.error("token [".concat(t,"]")),this.lexeme=e[0],this.line.advance(this.lexeme.length)}},{key:"is",value:function(t){return this.getPattern(t).test(this.line.rest)}},{key:"token",value:function(t,e){this.eat(t),e&&e(this.lexeme)}},{key:"optional",value:function(t,e){this.lexeme="",this.is(t)&&this.eat(t),e&&e(this.lexeme)}},{key:"without",value:function(t,e){var r=this.line.rest.match(this.getWithoutPattern(t));this.lexeme=r?this.line.rest.substr(0,r.index):this.line.rest,this.line.advance(this.lexeme.length),e&&e(this.lexeme)}},{key:"mlwithout",value:function(t,e){for(var r=this.getWithoutPattern(t),n=[],o=this.line.rest.match(r);!o&&(n.push(this.line.rest),this.line.advance(this.line.rest.length),!this.eof);)this.nextLine(),o=this.line.rest.match(r);if(o){var i=this.line.rest.substr(0,o.index);n.push(i),this.line.advance(i.length)}this.lexeme=n.join("\n"),e&&e(this.lexeme)}},{key:"error",value:function(t){throw new Error("错误信息：".concat(t,"；在第").concat(this.ln+1,"行 第").concat(this.col+1,"列\n").concat(this.line.str,"\n").concat(i(" ",this.line.col),"^"))}},{key:"skipSS",value:function(){this.optional("SS")}},{key:"skipWhite",value:function(){for(;(this.is("S")||this.eol)&&!this.eof;)this.eol?this.nextLine():this.token("SS")}}]),e}()}function N(t){return(N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function B(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,z(n.key),n)}}function z(t){var e=function(t,e){if("object"!==N(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==N(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===N(e)?e:String(e)}var C=function(){function t(e){var r,n,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,n="toJSON",o=v("value"),(n=z(n))in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o,this.name="sl-comment","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new I(e)):this.value=e.value}var e,r,n;return e=t,(r=[{key:"parse",value:function(t){var e=this;t.token("//"),t.token("all",(function(t){e.value=t}))}},{key:"toString",value:function(){return"//"+this.value}}])&&B(e.prototype,r),n&&B(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function M(t){return(M="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function F(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Q(n.key),n)}}function Q(t){var e=function(t,e){if("object"!==M(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==M(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===M(e)?e:String(e)}var G=function(){function t(e){var r,n,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,n="toJSON",o=v("value"),(n=Q(n))in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o,this.name="ml-comment","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new I(e)):this.value=e.value}var e,r,n;return e=t,(r=[{key:"parse",value:function(t){var e=this;t.token("/*"),t.mlwithout("*/",(function(t){e.value=t})),t.token("*/")}},{key:"toString",value:function(){return"/*".concat(this.value,"*/")}}])&&F(e.prototype,r),n&&F(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),W="⺀-⿕㆐-㆟㐀-䶿一-鿌豈-節",J="A-Za-zÀ-ɏ".concat(W),q=A({0:"0",",":",","/":"\\/","\\":"\\\\","<":"<",">":">","|":"\\|","~":"~","-":"-","(":"\\(",")":"\\)","[":"\\[","]":"\\]",":":":","/\\":"[\\/\\\\]","==":"==","--":"--","//":"\\/\\/","/*":"\\/\\*","*/":"\\*\\/",digit:"\\d",digits:"\\d+",paran:"[\\(\\)]",letter:"[".concat(J,"]"),word:"[".concat(J,"]+"),words:"[".concat(J," ]+"),abbreviation:"[".concat(J,"\\.]+"),midi:"midi",channel:"channel",program:"program",pan:"pan",title:"title:",subtitle:"subtitle:",composer:"composer:",lyricist:"lyricist:",arranger:"arranger:",source:"source:",beats:"[1-9]\\d{0,3}",beatType:"[1-9]\\d{0,3}",step:"[1-7]",accidental:"(#{1,2}|n|b{1,2})",octave:"('{1,5}|,{1,5})",type:"(---|-|={0,5}_|={1,5})",dots:"\\.{1,2}",pitch:"[#nb]*[1-7][,']*",duration:"[-_=]*.{1,2}",time:"[1-9]\\d{0,3}\\/",note:"\\(*(\\[\\d+:)*".concat("[#nb]*[1-7][,']*"),rest:"0",chord:"\\(*(\\[\\d+:)*<(".concat("[#nb]*[1-7][,']*",")*>"),multipart:"<",direction:"[\\/\\\\][".concat(J," ]+"),bar:"(:\\|:?|\\|:|\\|[\\|\\]]?)",wedge:"wedge",dynamics:"(p{1,6}|f{1,6}|m[pf]|sfp{0,2}|fp|rfz?|sf{1,2}z|fz)","tuplet-begin":"\\[\\d+:","tuplet-end":":\\]","lyrics-head":"lyrics.*:",lyric:"([A-Za-zÀ-ɏ,\\.!']+|[".concat(W,"])"),"lyric-control":"[@\\+\\-]m?\\d","lyric-control-symbol":"[@\\+\\-]",m:"m",cell:"([\\(\\[]*[#nb]?\\d|<|[\\:\\|]|[\\/\\\\])","part-head":"==","sl-comment":"\\/\\/","ml-comment":"\\/\\*",comment:"\\/[\\/\\*]",all:".*"});q.prototype.skipWhite=function(){for(;(this.is("S")||this.is("comment")||this.eol)&&!this.eof;)this.eol?this.nextLine():this.is("S")?this.token("SS"):this.is("sl-comment")?new C(this):new G(this)};var I=q;function V(t){return(V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function U(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function K(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,H(n.key),n)}}function X(t,e,r){return(e=H(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function H(t){var e=function(t,e){if("object"!==V(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==V(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===V(e)?e:String(e)}var Z=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};U(this,t),X(this,"toJSON",v("title","subtitle","composer","lyricist","arranger","source")),this.name="head","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new I(e)):(this.title=e.title,this.subtitle=e.subtitle,this.composer=e.composer,this.lyricist=e.lyricist,this.arranger=e.arranger,this.source=e.source)}var e,r,n;return e=t,(r=[{key:"parse",value:function(t){for(var e=this,r=function(r){t.token(r),t.without("comment",(function(t){e[r]=t.trim()}))};!t.eof;){if(t.is("title"))r("title");else if(t.is("subtitle"))r("subtitle");else if(t.is("composer"))r("composer");else if(t.is("lyricist"))r("lyricist");else if(t.is("arranger"))r("arranger");else{if(!t.is("source"))break;r("source")}t.skipWhite()}}},{key:"toString",value:function(){var t=[];return this.title&&t.push("title: ".concat(this.title)),this.subtitle&&t.push("subtitle: ".concat(this.subtitle)),this.composer&&t.push("composer: ".concat(this.composer)),this.lyricist&&t.push("lyricist: ".concat(this.lyricist)),this.arranger&&t.push("arranger: ".concat(this.arranger)),this.source&&t.push("source: ".concat(this.source)),t.join("\n")}}])&&K(e.prototype,r),n&&K(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Y(t){return(Y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function $(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,et(n.key),n)}}function tt(t,e,r){return(e=et(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function et(t){var e=function(t,e){if("object"!==Y(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Y(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Y(e)?e:String(e)}var rt=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};_(this,t),tt(this,"toJSON",v("partName","midi")),this.name="part-head","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new I(e)):(this.partName=e.partName,this.abbreviation=e.abbreviation||"",this.midi=e.midi)}var e,r,n;return e=t,(r=[{key:"parse",value:function(t){var e=this;if(t.token("=="),t.token("words",(function(t){e.partName=t.trim()})),t.skipSS(),this.abbreviation="",t.is("(")&&(t.token("("),t.token("abbreviation",(function(t){e.abbreviation=t})),t.token(")")),t.is(":")){t.token(":"),t.skipSS();var r=this.midi={};t.token("midi"),t.token("("),t.token("channel"),t.token(":"),t.skipSS(),t.token("digits",(function(t){r.channel=+t})),t.token(","),t.skipSS(),t.token("program"),t.token(":"),t.skipSS(),t.token("digits",(function(t){r.program=+t})),t.token(","),t.skipSS(),t.token("pan"),t.token(":"),t.skipSS(),t.token("digits",(function(t){r.pan=+t})),t.token(")")}t.skipWhite()}},{key:"toString",value:function(){var t=this.partName,e=this.abbreviation,r=this.midi,n=["=="];if(t&&n.push(t),e&&n.push("(".concat(e,")")),r){n[n.length-1]+=":";var o=r.channel,i=r.program,u=r.pan,a=[];"number"==typeof o&&a.push("channel: ".concat(o)),"number"==typeof i&&a.push("program: ".concat(i)),"number"==typeof u&&a.push("pan: ".concat(u)),n.push("midi(".concat(a.join(", "),")"))}return n.join(" ")}}])&&$(e.prototype,r),n&&$(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),nt=14898723840;function ot(t){return(ot="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function it(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,ut(n.key),n)}}function ut(t){var e=function(t,e){if("object"!==ot(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==ot(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===ot(e)?e:String(e)}var at=function(){function t(e){var r,n,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,n="toJSON",o=v("beats","beatType"),(n=ut(n))in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o,this.name="time","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new I(e)):(this.beats=e.beats,this.beatType=e.beatType)}var e,r,n;return e=t,(r=[{key:"parse",value:function(t){var e=this;t.token("beats",(function(t){e.beats=+t})),t.token("/"),t.token("beatType",(function(t){e.beatType=+t}))}},{key:"toString",value:function(){return"".concat(this.beats,"/").concat(this.beatType)}}])&&it(e.prototype,r),n&&it(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function ct(t){return(ct="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function st(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(o=n.key,i=void 0,i=function(t,e){if("object"!==ct(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==ct(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(o,"string"),"symbol"===ct(i)?i:String(i)),n)}var o,i}var ft=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,r,n;return e=t,(r=[{key:"onplay",get:function(){return this._onplay||this.defaultOnplay.bind(this)},set:function(t){var e=this.onplay;this._onplay=function(){e(),t()}}},{key:"onstop",get:function(){return this._onstop||this.defaultOnstop.bind(this)},set:function(t){var e=this.onstop;this._onstop=function(){e(),t()}}},{key:"defaultOnplay",value:function(){}},{key:"defaultOnstop",value:function(){}}])&&st(e.prototype,r),n&&st(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function lt(t){return(lt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function yt(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,dt(n.key),n)}}function pt(t,e){return(pt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function ht(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=mt(t);if(e){var o=mt(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return bt(this,r)}}function bt(t,e){if(e&&("object"===lt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return vt(t)}function vt(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function mt(t){return(mt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function dt(t){var e=function(t,e){if("object"!==lt(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==lt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===lt(e)?e:String(e)}var gt={1:0,2:2,3:4,4:5,5:7,6:9,7:11},wt={"#":1,"##":2,n:0,"":0,b:-1,bb:-2},Ot=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&pt(t,e)}(u,t);var e,r,n,o=ht(u);function u(t){var e,r,n,i;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),e=o.call(this),r=vt(e),n="toJSON",i=v("step","accidental","octave"),(n=dt(n))in r?Object.defineProperty(r,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[n]=i,e.name="pitch","lexer"===t.name?e.parse(t):"string"==typeof t?e.parse(new I(t)):(e.step=t.step||1,e.accidental=t.accidental||"",e.octave=t.octave||0),e}return e=u,(r=[{key:"parse",value:function(t){var e=this;t.optional("accidental",(function(t){e.accidental=t})),t.token("step",(function(t){e.step=+t})),t.optional("octave",(function(t){e.octave="'"===t[0]?t.length:","===t[0]?-t.length:0}))}},{key:"alter",get:function(){return"number"==typeof this._alter?this._alter:wt[this.accidental]},set:function(t){this._alter=t}},{key:"midiNumber",get:function(){return gt[this.step]+this.alter+12*this.octave+60}},{key:"frequency",get:function(){return 440*Math.pow(2,(this.midiNumber-69)/12)}},{key:"defaultOnplay",value:function(){this.tie&&this.tie.onplay()}},{key:"defaultOnstop",value:function(){this.tie&&this.tie.onstop()}},{key:"toString",value:function(){var t=this.step,e=this.accidental,r=this.octave,n=r>0?i("'",r):i(",",-r);return"".concat(e).concat(t).concat(n)}}])&&yt(e.prototype,r),n&&yt(e,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(ft);function St(t){return(St="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function jt(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Rt(n.key),n)}}function Pt(t,e){return(Pt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function kt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=Et(t);if(e){var o=Et(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return Lt(this,r)}}function Lt(t,e){if(e&&("object"===St(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return xt(t)}function xt(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Et(t){return(Et=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Rt(t){var e=function(t,e){if("object"!==St(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==St(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===St(e)?e:String(e)}var Tt={"---":1,"-":2,"":4,_:8,"=":16,"=_":32,"==":64,"==_":128,"===":256,"===_":512,"====":1024},Dt=h(Tt),At=[1,1.5,1.75],Nt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Pt(t,e)}(u,t);var e,r,n,o=kt(u);function u(t){var e,r,n,i;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),e=o.call(this),r=xt(e),n="toJSON",i=v("type","dots","modification"),(n=Rt(n))in r?Object.defineProperty(r,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[n]=i,e.name="duration","lexer"===t.name?e.parse(t):"string"==typeof t?e.parse(new I(t)):(e.type=t.type||4,e.dots=t.dots||0,e.modification=t.modification),e.type>4&&e.initBeams(),e}return e=u,(r=[{key:"initBeams",value:function(){this.numBeams=Math.log2(this.type)-2,this.beams=f(this.numBeams).map((function(){return{type:"single"}}))}},{key:"parse",value:function(t){var e=this;t.optional("type",(function(t){e.type=Tt[t]})),t.optional("dots",(function(t){e.dots=t.length}))}},{key:"quartersQ",get:function(){var t=this.modification;return 4*nt/this.type*At[this.dots]*(t?t.normal/t.actual:1)}},{key:"quarters",get:function(){return this.quartersQ/nt}},{key:"toString",value:function(){return"".concat(Dt[this.type]).concat(i(".",this.dots))}}])&&jt(e.prototype,r),n&&jt(e,n),Object.defineProperty(e,"prototype",{writable:!1}),u}(ft);function Bt(t){return(Bt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function zt(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Wt(n.key),n)}}function Ct(t,e){return(Ct=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function Mt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=Gt(t);if(e){var o=Gt(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return Ft(this,r)}}function Ft(t,e){if(e&&("object"===Bt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Qt(t)}function Qt(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Gt(t){return(Gt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Wt(t){var e=function(t,e){if("object"!==Bt(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Bt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Bt(e)?e:String(e)}var Jt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Ct(t,e)}(i,t);var e,r,n,o=Mt(i);function i(t){var e,r,n,u;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),e=o.call(this),r=Qt(e),n="toJSON",u=v("type"),(n=Wt(n))in r?Object.defineProperty(r,n,{value:u,enumerable:!0,configurable:!0,writable:!0}):r[n]=u,e.name="tie","lexer"===t.name?e.parse(t):"string"==typeof t?e.parse(new I(t)):(e.type=t.type,e.cell=t.cell),e}return e=i,(r=[{key:"parse",value:function(t){var e=this;t.token("~",(function(){e.type="begin"}))}},{key:"toString",value:function(){return"end"===this.type?"":"~"}}])&&zt(e.prototype,r),n&&zt(e,n),Object.defineProperty(e,"prototype",{writable:!1}),i}(ft);function qt(t){return(qt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function It(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Zt(n.key),n)}}function Vt(t,e){return(Vt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function Ut(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=Ht(t);if(e){var o=Ht(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return Kt(this,r)}}function Kt(t,e){if(e&&("object"===qt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Xt(t)}function Xt(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ht(t){return(Ht=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Zt(t){var e=function(t,e){if("object"!==qt(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==qt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===qt(e)?e:String(e)}var Yt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Vt(t,e)}(i,t);var e,r,n,o=Ut(i);function i(t){var e,r,n,u;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),e=o.call(this),r=Xt(e),n="toJSON",u=v("value"),(n=Zt(n))in r?Object.defineProperty(r,n,{value:u,enumerable:!0,configurable:!0,writable:!0}):r[n]=u,e.name="slur","lexer"===t.name?e.parse(t):"string"==typeof t?e.parse(new I(t)):e.value=t.value,e}return e=i,(r=[{key:"parse",value:function(t){var e=this;t.token("paran",(function(t){e.value=t}))}},{key:"toString",value:function(){return this.value}}])&&It(e.prototype,r),n&&It(e,n),Object.defineProperty(e,"prototype",{writable:!1}),i}(ft);function _t(t){return(_t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function $t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,ie(n.key),n)}}function te(t,e){return(te=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function ee(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=oe(t);if(e){var o=oe(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return re(this,r)}}function re(t,e){if(e&&("object"===_t(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return ne(t)}function ne(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function oe(t){return(oe=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ie(t){var e=function(t,e){if("object"!==_t(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==_t(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===_t(e)?e:String(e)}var ue=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&te(t,e)}(i,t);var e,r,n,o=ee(i);function i(t){var e,r,n,u;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),e=o.call(this),r=ne(e),n="toJSON",u=v("type"),(n=ie(n))in r?Object.defineProperty(r,n,{value:u,enumerable:!0,configurable:!0,writable:!0}):r[n]=u,e.name="tuplet","lexer"===t.name?e.parse(t):"string"==typeof t?e.parse(new I(t)):e.type=t.type,e}return e=i,(r=[{key:"parse",value:function(t){var e=this;t.is("[")?(t.token("[",(function(){e.type="begin"})),t.token("digits",(function(t){e.actual=+t})),this.normal=2,t.token(":")):t.is("tuplet-end")&&t.token("tuplet-end",(function(){e.type="end"}))}},{key:"toString",value:function(){return this.type}}])&&$t(e.prototype,r),n&&$t(e,n),Object.defineProperty(e,"prototype",{writable:!1}),i}(ft);function ae(t){return(ae="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ce(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,se(n.key),n)}}function se(t){var e=function(t,e){if("object"!==ae(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==ae(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===ae(e)?e:String(e)}var fe=function(){function t(e,r){var n,o,i;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,o="toJSON",i=v("syllabic","text"),(o=se(o))in n?Object.defineProperty(n,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[o]=i,this.name="lyric",this.prev=r,"lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new I(e)):(this.syllabic=e.syllabic,this.text=e.text)}var e,r,n;return e=t,(r=[{key:"parse",value:function(t){var e=this;t.token("lyric",(function(t){e.text=t})),t.skipWhite(),!t.is("-")||t.is("--")||t.is("lyric-control")?function(){switch(e.prev&&e.prev.syllabic){case"begin":case"middle":e.syllabic="end";break;case"end":case"single":default:e.syllabic="single"}}():(function(){switch(e.prev&&e.prev.syllabic){case"begin":case"middle":e.syllabic="middle";break;case"end":case"single":default:e.syllabic="begin"}}(),t.token("-"),t.skipWhite())}},{key:"toString",value:function(){switch(this.syllabic){case"single":case"end":return this.text;case"begin":case"middle":return"".concat(this.text," -")}return this.text}}])&&ce(e.prototype,r),n&&ce(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function le(t){return(le="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ye(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,de(n.key),n)}}function pe(t,e){return(pe=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function he(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=me(t);if(e){var o=me(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return be(this,r)}}function be(t,e){if(e&&("object"===le(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return ve(t)}function ve(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function me(t){return(me=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function de(t){var e=function(t,e){if("object"!==le(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==le(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===le(e)?e:String(e)}var ge=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&pe(t,e)}(i,t);var e,r,n,o=he(i);function i(t){var e,r,n,u;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),e=o.call(this),r=ve(e),n="toJSON",u=v("pitch","duration","tie","tuplet","beginSlurs","endSlurs","lyric"),(n=de(n))in r?Object.defineProperty(r,n,{value:u,enumerable:!0,configurable:!0,writable:!0}):r[n]=u,e.name="note","lexer"===t.name)e.parse(t);else if("string"==typeof t)e.parse(new I(t));else{var a=t.pitch,c=t.duration,s=t.articulations,f=t.tie,l=t.beginSlurs,y=t.endSlurs,p=t.tuplet,h=t.lyrics;e.pitch=new Ot(a),e.duration=new Nt(c),s&&(e.articulations=s),f&&(e.tie=new Jt(f)),l&&(e.beginSlurs=l.map((function(t){return new Yt(t)}))),y&&(e.endSlurs=y.map((function(t){return new Yt(t)}))),p&&(e.tuplet=p),h&&(e.lyrics=h.map((function(t){return new fe(t)})))}return e}return e=i,(r=[{key:"parse",value:function(t){for(;t.is("(");)this.beginSlurs=this.beginSlurs||[],this.beginSlurs.push(new Yt(t));for(;t.is("[");)this.tuplet=new ue(t);for(this.pitch=new Ot(t),this.duration=new Nt(t);t.is("tuplet-end");)this.tuplet=new ue(t);for(t.is("~")&&(this.tie=new Jt(t));t.is(")");)this.endSlurs=this.endSlurs||[],this.endSlurs.push(new Yt(t))}},{key:"defaultOnplay",value:function(){this.pitch.onplay(),this.duration.onplay(),this.tie&&this.tie.onplay(),this.tuplet&&this.tuplet.onplay(),this.beginSlurs&&this.beginSlurs.forEach((function(t){return t.onplay()})),this.endSlurs&&this.endSlurs.forEach((function(t){return t.onplay()}))}},{key:"defaultOnstop",value:function(){this.pitch.onstop(),this.duration.onstop(),this.tie&&this.tie.onstop(),this.tuplet&&this.tuplet.onstop(),this.beginSlurs&&this.beginSlurs.forEach((function(t){return t.onstop()})),this.endSlurs&&this.endSlurs.forEach((function(t){return t.onstop()}))}},{key:"toString",value:function(){var t=[],e=this.articulations,r=this.beginSlurs,n=this.endSlurs,o=this.tuplet,i=this.duration,u=this.tie;return r&&t.push(r.join("")),o&&"begin"===o.type&&t.push("[".concat(i.modification.actual,":")),e&&t.push("x"),t.push("".concat(this.pitch).concat(i)),o&&"end"===o.type&&t.push(":]"),n&&t.push(n.join("")),u&&t.push(this.tie),t.join("")}}])&&ye(e.prototype,r),n&&ye(e,n),Object.defineProperty(e,"prototype",{writable:!1}),i}(ft);function we(t){return(we="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Oe(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Se(n.key),n)}}function Se(t){var e=function(t,e){if("object"!==we(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==we(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===we(e)?e:String(e)}var je=function(){function t(e){var r,n,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,n="toJSON",o=v("duration"),(n=Se(n))in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o,this.name="rest","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new I(e)):this.duration=new Nt(e.duration)}var e,r,n;return e=t,(r=[{key:"parse",value:function(t){t.token("0"),this.duration=new Nt(t)}},{key:"toString",value:function(){return"0"+this.duration}}])&&Oe(e.prototype,r),n&&Oe(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Pe(t){return(Pe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ke(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,De(n.key),n)}}function Le(t,e){return(Le=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function xe(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=Te(t);if(e){var o=Te(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return Ee(this,r)}}function Ee(t,e){if(e&&("object"===Pe(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Re(t)}function Re(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Te(t){return(Te=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function De(t){var e=function(t,e){if("object"!==Pe(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Pe(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Pe(e)?e:String(e)}var Ae=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Le(t,e)}(i,t);var e,r,n,o=xe(i);function i(t){var e,r,n,u;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),e=o.call(this),r=Re(e),n="toJSON",u=v("pitches","duration","tuplet","tie","beginSlurs","endSlurs","lyric"),(n=De(n))in r?Object.defineProperty(r,n,{value:u,enumerable:!0,configurable:!0,writable:!0}):r[n]=u,e.name="chord","lexer"===t.name?e.parse(t):"string"==typeof t?e.parse(new I(t)):(e.pitches=t.pitches.map((function(t){return new Ot(t)})),e.duration=new Nt(t.duration),tie&&(e.tie=new Jt(tie)),beginSlurs&&(e.beginSlurs=beginSlurs.map((function(t){return new Yt(t)}))),endSlurs&&(e.endSlurs=endSlurs.map((function(t){return new Yt(t)}))),tuplet&&(e.tuplet=tuplet),lyrics&&(e.lyrics=lyrics.map((function(t){return new Lyric(t)})))),e}return e=i,(r=[{key:"parse",value:function(t){for(this.pitches=[];t.is("(");)this.beginSlurs=this.beginSlurs||[],this.beginSlurs.push(new Yt(t));for(;t.is("[");)this.tuplet=new ue(t);for(t.token("<");t.is("pitch");)this.pitches.push(new Ot(t));for(t.token(">"),this.duration=new Nt(t),t.is("~")&&(this.tie=new Jt(t));t.is("tuplet-end");)this.tuplet=new ue(t);for(t.is("~")&&(this.tie=new Jt(t));t.is(")");)this.endSlurs=this.endSlurs||[],this.endSlurs.push(new Yt(t))}},{key:"defaultOnplay",value:function(){this.duration.onplay(),this.tie&&this.tie.onplay(),this.tuplet&&this.tuplet.onplay(),this.beginSlurs&&this.beginSlurs.forEach((function(t){return t.onplay()})),this.endSlurs&&this.endSlurs.forEach((function(t){return t.onplay()}))}},{key:"defaultOnstop",value:function(){this.duration.onstop(),this.tie&&this.tie.onstop(),this.tuplet&&this.tuplet.onstop(),this.beginSlurs&&this.beginSlurs.forEach((function(t){return t.onstop()})),this.endSlurs&&this.endSlurs.forEach((function(t){return t.onstop()}))}},{key:"toString",value:function(){var t=[],e=this.beginSlurs,r=this.endSlurs,n=this.tuplet,o=this.duration,i=this.tie;return e&&t.push(e.join("")),n&&"begin"===n.type&&t.push("[".concat(o.modification.actual,":")),t.push("<".concat(this.pitches.join(""),">").concat(this.duration)),n&&"end"===n.type&&t.push(":]"),r&&t.push(r.join("")),i&&t.push(this.tie),t.join("")}}])&&ke(e.prototype,r),n&&ke(e,n),Object.defineProperty(e,"prototype",{writable:!1}),i}(ft);function Ne(t){return(Ne="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Be(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,ze(n.key),n)}}function ze(t){var e=function(t,e){if("object"!==Ne(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Ne(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Ne(e)?e:String(e)}var Ce=function(){function t(e){var r,n,o;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,n="toJSON",o=v("placement","words","wedge","dynamics"),(n=ze(n))in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o,this.name="direction","lexer"===e.name)this.parse(e);else if("string"==typeof e)this.parse(new I(e));else{this.placement=e.placement;var i=e.words,u=e.wedge,a=e.dynamics;i&&(this.words=i),u&&(this.wedge=u),a&&(this.dynamics=a)}}var e,r,n;return e=t,(r=[{key:"parse",value:function(t){var e=this;t.token("/\\",(function(t){e.placement="/"===t?"above":"below"})),t.is("wedge")?(t.token("wedge"),t.token("("),t.token("words",(function(t){e.wedge=t.trim()})),t.token(")")):t.is("dynamics")?t.token("dynamics",(function(t){e.dynamics=t})):t.is("words")&&t.token("words",(function(t){e.words=t.trim()}))}},{key:"toString",value:function(){var t=[],e=this.placement,r=this.words,n=this.wedge,o=this.dynamics;return t.push("above"===e?"/":"\\"),r&&t.push(r),n&&t.push("wedge(".concat(n,")")),o&&t.push(o),t.join("")}}])&&Be(e.prototype,r),n&&Be(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Me(t){return(Me="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Fe(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Qe(n.key),n)}}function Qe(t){var e=function(t,e){if("object"!==Me(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Me(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Me(e)?e:String(e)}var Ge=function(){function t(e){var r,n,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,n="toJSON",o=v("data"),(n=Qe(n))in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o,this.name="layer","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new I(e)):this.data=e.data.map((function(t){switch(t.name){case"note":return new ge(t);case"rest":return new je(t);case"chord":return new Ae(t);case"direction":return new Ce(t);default:throw new Error("Music data: ".concat(t))}}))}var e,r,n;return e=t,(r=[{key:"parse",value:function(t){for(this.data=[];!t.eof;){if(t.is("note"))this.data.push(new ge(t));else if(t.is("rest"))this.data.push(new je(t));else if(t.is("chord"))this.data.push(new Ae(t));else if(t.is("direction"))this.data.push(new Ce(t));else{if(t.is("|")){t.token("|"),t.skipWhite();break}if(t.is(">"))break;t.error("music data in layer")}t.skipWhite()}}},{key:"toString",value:function(){return this.data.join(" ")}}])&&Fe(e.prototype,r),n&&Fe(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function We(t){return(We="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Je(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,qe(n.key),n)}}function qe(t){var e=function(t,e){if("object"!==We(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==We(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===We(e)?e:String(e)}var Ie=function(){function t(e){var r,n,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,n="toJSON",o=v("layers"),(n=qe(n))in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o,this.name="multipart","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new I(e)):this.layers=e.layers.map((function(t){return new Ge(t)}))}var e,r,n;return e=t,(r=[{key:"parse",value:function(t){for(this.layers=[],t.token("<"),t.skipWhite();!t.is(">")&&!t.eof;)this.layers.push(new Ge(t));t.token(">")}},{key:"toString",value:function(){return"<".concat(this.layers.join(" | "),">")}}])&&Je(e.prototype,r),n&&Je(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Ve(t){return(Ve="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ue(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ke(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,He(n.key),n)}}function Xe(t,e,r){return(e=He(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function He(t){var e=function(t,e){if("object"!==Ve(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Ve(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Ve(e)?e:String(e)}var Ze=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{value:"|"};Ue(this,t),Xe(this,"toJSON",v("value")),this.name="bar","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new I(e)):this.value=e.value}var e,r,n;return e=t,(r=[{key:"parse",value:function(t){var e=this;t.token("bar",(function(t){e.value=t}))}},{key:"toString",value:function(){return this.value}}])&&Ke(e.prototype,r),n&&Ke(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Ye(t){return(Ye="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _e(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,$e(n.key),n)}}function $e(t){var e=function(t,e){if("object"!==Ye(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Ye(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Ye(e)?e:String(e)}var tr=function(){function t(e){var r,n,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,n="toJSON",o=v("sign","line"),(n=$e(n))in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o,this.name="clef","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new I(e)):(this.sign=e.sign,this.line=e.line)}var e,r,n;return e=t,(r=[{key:"parse",value:function(t){}},{key:"toString",value:function(){return"clef(".concat(this.sign).concat(this.line,")")}}])&&_e(e.prototype,r),n&&_e(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function er(t){return(er="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function rr(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,nr(n.key),n)}}function nr(t){var e=function(t,e){if("object"!==er(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==er(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===er(e)?e:String(e)}var or=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),function(t,e,r){(e=nr(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r}(this,"toJSON",v("fifths","mode")),this.name="key","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new I(e)):(this.fifths=e.fifths,this.mode=e.mode)}var e,r,n;return e=t,(r=[{key:"parse",value:function(t){}},{key:"toString",value:function(){return"key(".concat(this.fifths).concat(this.mode,")")}}])&&rr(e.prototype,r),n&&rr(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function ir(t){return(ir="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ur(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function ar(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,sr(n.key),n)}}function cr(t,e,r){return(e=sr(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function sr(t){var e=function(t,e){if("object"!==ir(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==ir(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===ir(e)?e:String(e)}var fr={bb:-2,b:-1,n:0,"":0,"#":1,"##":2},lr=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{data:[]};ur(this,t),cr(this,"toJSON",v("data","leftBar","rightBar")),this.name="cell","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new I(e)):this.data=e.data.map((function(t){switch(t.name){case"time":return new at(t);case"note":return new ge(t);case"rest":return new je(t);case"chord":return new Ae(t);case"multipart":return new Ie(t);case"direction":return new Ce(t);case"bar":return new Ze(t);case"clef":return new tr(t);case"key":return new or(t);default:throw new Error("Music data: ".concat(t))}})),this.setAlters(),this.setModifications(),this.linkTuplets(),this.extractBars()}var e,r,n;return e=t,(r=[{key:"parse",value:function(t){for(this.data=[];!t.eof;){if(t.is("time"))this.data.push(new at(t));else if(t.is("note"))this.data.push(new ge(t));else if(t.is("rest"))this.data.push(new je(t));else if(t.is("chord"))this.data.push(new Ae(t));else if(t.is("multipart"))this.data.push(new Ie(t));else if(t.is("direction"))this.data.push(new Ce(t));else if(t.is("bar")){if(this.data.push(new Ze(t)),this.data.length>1){t.skipWhite();break}}else{if(t.is("==")||t.is("--"))break;t.error("music data in cell")}t.skipWhite()}}},{key:"setAlters",value:function(){var t={1:"",2:"",3:"",4:"",5:"",6:"",7:""},e=function(e){var r=e.step,n=e.accidental;n&&(t[r]=n),e.alter=fr[t[r]]};this.data.forEach((function(t){switch(t.name){case"note":return e(t.pitch);case"chord":return t.pitches.forEach(e);case"multipart":return}}))}},{key:"setModifications",value:function(){var t,e;this.data.forEach((function(r){var n=r.tuplet,o=r.duration;n&&"begin"===n.type&&(t=n.actual,e=n.normal),o&&t&&(o.modification={actual:t,normal:e}),n&&"end"===n.type&&(t=void 0,e=void 0)}))}},{key:"linkTuplets",value:function(){var t={};this.data.forEach((function(e){var r=e.tuplet;r&&("begin"===r.type?t=r:t.next=r)}))}},{key:"extractBars",value:function(){var t=this.data;t.length?(this.rightBar="bar"===u(t).name?t.pop():new Ze("|"),this.leftBar=0===t.length||"bar"!==t[0].name?new Ze("|"):t.shift()):(this.leftBar=new Ze("|"),this.rightBar=new Ze("|"))}},{key:"toString",value:function(){var t=[],e=[];return this.data.concat(this.rightBar).forEach((function(r){if("dummy"!==r.name){var n=r.duration;if(!n||n.type<8)return t.push(r);var o=n.beams;o.some((function(t){return"single"!==t.type}))?e.push(r):t.push(r),e.length>0&&!o.some((function(t){return"begin"===t.type||"continue"===t.type}))&&(t.push(e.join("")),e.length=0)}})),t.join(" ")}}])&&ar(e.prototype,r),n&&ar(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function yr(t){return(yr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function pr(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,hr(n.key),n)}}function hr(t){var e=function(t,e){if("object"!==yr(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==yr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===yr(e)?e:String(e)}var br={"@":"at","+":"forward","-":"backward"},vr=h(br),mr=function(){function t(e){var r,n,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,n="toJSON",o=v("measureAmount","typeData","noteAmount"),(n=hr(n))in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o,this.name="lyric-control","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new I(e)):(this.instruction=e.instruction,this.measureAmount=e.measureAmount,this.typeData=e.typeData,this.noteAmount=e.noteAmount)}var e,r,n;return e=t,(r=[{key:"parse",value:function(t){var e=this;t.token("lyric-control-symbol",(function(t){e.instruction=br[t]})),t.is("digits")?(this.type="note",t.token("digits",(function(t){e.amount=+t}))):t.is("m")?(this.type="measure",t.token("m"),t.token("digits",(function(t){e.amount=+t}))):t.error("lyric-control parameters")}},{key:"toString",value:function(){var t=vr[this.instruction];return"note"===this.type?t+=this.amount:"measure"===this.type&&(t+="m".concat(this.amount)),t}}])&&pr(e.prototype,r),n&&pr(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function dr(t){return(dr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function gr(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,wr(n.key),n)}}function wr(t){var e=function(t,e){if("object"!==dr(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==dr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===dr(e)?e:String(e)}var Or=function(){function t(e){var r,n,o,i=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,n="toJSON",o=v(),(n=wr(n))in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o,this.name="lyrics","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new I(e)):this.list=e.list.map((function(t){return new fe(t)})),this.list.forEach((function(t,e){"begin"!==t.syllabic&&"middle"!==t.syllabic||(t.next=i.list[e+1])}))}var e,r,n;return e=t,(r=[{key:"parse",value:function(t){var e,r;for(t.token("lyrics-head"),t.skipWhite(),this.list=[];(t.is("lyric")||t.is("lyric-control"))&&(t.is("lyric")?(e=new fe(t,r),this.list.push(e),r=e):this.list.push(new mr(t)),t.skipWhite(),!t.is("lyrics-head")););}},{key:"toString",value:function(){}}])&&gr(e.prototype,r),n&&gr(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Sr(t){return(Sr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function jr(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(o=n.key,i=void 0,i=function(t,e){if("object"!==Sr(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Sr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(o,"string"),"symbol"===Sr(i)?i:String(i)),n)}var o,i}var Pr=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.name="dummy",Object.assign(this,e)}var e,r,n;return e=t,(r=[{key:"toString",value:function(){return"[[Dummy]]"}}])&&jr(e.prototype,r),n&&jr(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function kr(t){return(kr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Lr(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,xr(n.key),n)}}function xr(t){var e=function(t,e){if("object"!==kr(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==kr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===kr(e)?e:String(e)}var Er=function(){function t(e){var r,n,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,n="toJSON",o=v("cells"),(n=xr(n))in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o,this.name="staff","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new I(e)):this.cells=e.cells.map((function(t){return new lr(t)})),this.resetLeftBars(),this.setBeams(),this.linkTies(),this.linkSlurs(),this.setT(),this.lyricsLines&&this.placeLyrics()}var e,r,n;return e=t,(r=[{key:"parse",value:function(t){for(this.cells=[],t.is("--")&&(t.token("--"),t.skipSS(),t.eol||t.error("Unexpected token")),t.skipWhite();t.is("cell");)this.cells.push(new lr(t)),t.skipWhite();for(;t.is("lyrics-head");)this.lyricsLines=this.lyricsLines||[],this.lyricsLines.push(new Or(t))}},{key:"resetLeftBars",value:function(){var t=this.cells;t.forEach((function(e,r){r>0&&(e.leftBar.value=t[r-1].rightBar.value)}))}},{key:"setBeams",value:function(){this.makeBeamGroups().forEach((function(t){t.forEach((function(e,r){e.duration.beams.forEach((function(e,n){var o=t[r-1]&&t[r-1].duration.beams[n],i=t[r+1]&&t[r+1].duration.beams[n];o&&i?e.type="continue":o?e.type="end":i&&(e.type="begin")}))})),t.forEach((function(e,r){e.duration.beams.forEach((function(e,n){if("begin"===e.type)for(var o=r+1;o<t.length;o++){var i=t[o].duration.beams[n];i&&"end"===i.type&&(e.endBeam=i)}}))}))}))}},{key:"makeBeamGroups",value:function(){var t=0,e=[];return this.cells.forEach((function(r){var n=function(){i.length&&(e.push(i),i=[])},o=0,i=[];r.data.forEach((function(e){if("time"===e.name)return t=Rr(e),o=0,void n();if(t&&e.duration){var r=e.duration,u=r.type,a=r.quartersQ;o+=a,u<8?(n(),o%=t):(o<=t&&i.push(e),o>=t&&(o=0,n()))}})),n()})),e}},{key:"linkTies",value:function(){var t=this;this.cells.forEach((function(e,r){e.data.forEach((function(n,o){if(n.tie){var i=n.tie.type;if("begin"===i||"continue"===i){var u=function(e,r){var n;do{var o=t.cells[e];if(r++,!(n=o.data[r])){if(e++,r=0,!(o=t.cells[e]))break;n=o.data[r]}if(n){if("note"===n.name||"chord"===n.name)return{ndt:n,ncell:o};if("rest"===n.name)break}}while(n);return{}}(r,o),a=u.ndt,c=u.ncell;if(!a||!Dr(n,a))return;var s=function(t,r,n,o){t&&r&&(t.tie?"end"===t.tie.type&&(t.tie.type="continue"):t.tie=new Jt({type:"begin"}),r.tie=new Jt({type:r.tie?"continue":"end",cell:c}),t.tie.cell=e,t.tie.note=n,t.tie.nextNote=o,"pitch"===r.name&&(t.tie.nextPitch=r),t.tie.next=r.tie,r.tie.note=o,r.tie.prevNote=n,"pitch"===t.name&&(r.tie.prevPitch=t),r.tie.prev=t.tie,"pitch"===t.name&&"note"===r.name?(n.tie.cell=e,n.tie.note=n,n.tie.nextNote=o,n.tie.next=o.tie):"note"===t.name&&r.name)};switch(n.name){case"note":switch(a.name){case"note":s(n,a,n,a);break;case"chord":var f=Ar(a.pitches,n.pitch);s(n,f,n,a)}break;case"chord":switch(a.name){case"note":var l=Ar(n.pitches,a.pitch);s(l,a,n,a);break;case"chord":Nr(n.pitches,a.pitches).forEach((function(t){var e=t.curr,r=t.next;return s(e,r,n,a)})),s(n,a,n,a)}}}}}))}))}},{key:"linkSlurs",value:function(){var t=this;this.cells.forEach((function(e,r){e.data.forEach((function(n,o){if(n.beginSlurs)for(var i=Tr(t.cells,r,o),u=i(),a=u.ncell,c=u.ndt;c;){if(c.endSlurs){n.beginSlurs[0].cell=e,n.beginSlurs[0].nextNote=c,n.beginSlurs[0].next=c.endSlurs[0],c.endSlurs[0].cell=a,c.endSlurs[0].prevNote=n,c.endSlurs[0].prev=n.beginSlurs[0];break}var s=i();c=s.ndt,a=s.ncell}}))}))}},{key:"setT",value:function(){var t=0,e=0;this.cells.forEach((function(r){var n=0,o=0;r.data.forEach((function(r){r.t=t,r.tQ=e,r.tc=n,r.tcQ=o;var i=r.duration;if(i){var u=i.quarters*(60/90);i.seconds=u,t+=u,e+=i.quartersQ,n+=u,o+=i.quartersQ}}))}))}},{key:"placeLyrics",value:function(){var t=this;this.lyricsLines.forEach((function(e,r){for(var n=!1,o=!1,i=0;i<t.cells.length;i++)for(var u=t.cells[i],a=0;a<u.data.length;a++){var c=u.data[a];if(!c)break;if(!c.tie||"begin"===c.tie.type){var s=e.list[0];if(s&&"lyric-control"===s.name){var f=e.list.shift(),l=new Pr({lyrics:[]});l.lyrics[r]=f,u.data.splice(a,0,l);var y=f.instruction,p=f.type,h=f.amount;if("at"===y){if("measure"===p){i=h-2;break}if("note"===p){a=h-1;continue}}else if("forward"===y){if("measure"===p){i+=h-1;break}if("note"===p){a+=h;continue}}else if("backward"===y){if("measure"===p){i-=h+1;break}if("note"===p){a-=h,o=!0;continue}}}if((!n||o)&&("note"===c.name||"chord"===c.name)){o=!1;var b=e.list.shift();b&&(c.lyrics=c.lyrics||[],c.lyrics[r]=b)}c.endSlurs&&(n=!1),c.beginSlurs&&(n=!0)}}})),delete this.lyricsLines}},{key:"toString",value:function(){var t=this.cells.join(" "),e=[[]];this.cells.forEach((function(t){t.data.forEach((function(t){t.lyrics&&t.lyrics.forEach((function(t,r){e[r]=e[r]||[],e[r].push(t)}))}))}));var r=e.map((function(t){return t.join(" ")})),n=[t];return r.forEach((function(t){t&&n.push("lyrics: "+t)})),n.join("\n\n")}}])&&Lr(e.prototype,r),n&&Lr(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),Rr=function(t){var e=t.beats,r=t.beatType;return 8===r?e%3==0?1.5*nt:.5*nt:nt/r*4},Tr=function(t,e,r){return function(){for(var n,o;!o;)if(n=t[e],r++,!(o=n.data[r])){if(e++,r=0,!(n=t[e]))break;o=n.data[r]}return{ncell:n,ndt:o}}},Dr=function(t,e){switch(t.name){case"note":switch(e.name){case"note":return e.pitch.midiNumber===t.pitch.midiNumber;case"chord":return e.pitches.some((function(e){return e.midiNumber===t.pitch.midiNumber}))}case"chord":switch(e.name){case"note":return t.pitches.some((function(t){return t.midiNumber===e.pitch.midiNumber}));case"chord":return t.pitches.some((function(t,r){return e.pitches.some((function(e){return t.midiNumber===e.midiNumber}))}))}}},Ar=function(t,e){for(var r=0;r<t.length;r++)if(t[r].midiNumber===e.midiNumber)return t[r]},Nr=function(t,e){var r=[];return t.forEach((function(t){e.forEach((function(e){t.midiNumber===e.midiNumber&&r.push({curr:t,next:e})}))})),r};function Br(t){return(Br="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function zr(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Cr(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Fr(n.key),n)}}function Mr(t,e,r){return(e=Fr(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Fr(t){var e=function(t,e){if("object"!==Br(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Br(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Br(e)?e:String(e)}var Qr=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{staves:[]};zr(this,t),Mr(this,"toJSON",v("head","staves")),this.name="part","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new I(e)):(this.head=new rt(e.head),this.staves=e.staves.map((function(t){return new Er(t)})))}var e,r,n;return e=t,(r=[{key:"isEmpty",get:function(){return 1===this.staves.length&&0===this.staves[0].cells.length}},{key:"parse",value:function(t){this.head=t.is("part-head")?new rt(t):new rt,this.staves=[],t.skipWhite();do{this.staves.push(new Er(t))}while(t.is("--"));t.skipWhite()}},{key:"stavesStr",value:function(){return this.staves.join("\n\n--\n")}},{key:"singlePartToString",value:function(){return""+this.head=="=="?this.stavesStr():this.toString()}},{key:"toString",value:function(){return this.head+"\n"+this.stavesStr()}}])&&Cr(e.prototype,r),n&&Cr(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Gr(t){return(Gr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Wr(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Jr(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Ir(n.key),n)}}function qr(t,e,r){return(e=Ir(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Ir(t){var e=function(t,e){if("object"!==Gr(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Gr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Gr(e)?e:String(e)}var Vr=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{parts:[]};Wr(this,t),qr(this,"toJSON",v("parts","leftBar","rightBar")),this.name="measure",this.parts=e.parts,this.cells=this.mapCell((function(t){return t})),this.partIndices=this.mapCell((function(t,e,r,n){return n})),this.setPartsToCellsIndices()}var e,r,n;return e=t,(r=[{key:"setPartsToCellsIndices",value:function(){var t=this;this.partsToCellsIndices=f(this.parts.length).map((function(){return[]})),this.eachCell((function(e,r,n,o){return t.partsToCellsIndices[o].push(r)}))}},{key:"eachCell",value:function(t){var e=0;this.parts.forEach((function(r,n){r.staves.forEach((function(r,o){t(r,e,o,n),e++}))}))}},{key:"mapCell",value:function(t){var e=[];return this.eachCell((function(r,n,o,i){return e.push(t(r,n,o,i))})),e}}])&&Jr(e.prototype,r),n&&Jr(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Ur(t){return(Ur="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Kr(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Xr(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Zr(n.key),n)}}function Hr(t,e,r){return(e=Zr(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Zr(t){var e=function(t,e){if("object"!==Ur(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Ur(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Ur(e)?e:String(e)}var Yr=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{parts:[]};Kr(this,t),Hr(this,"toJSON",v("parts","measures")),this.name="body","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new I(e)):(e.parts||(e.parts=[]),this.parts=e.parts.map((function(t){return new Qr(t)}))),this.fillStaves(),this.makeMeasures()}var e,r,n;return e=t,(r=[{key:"parse",value:function(t){var e;this.parts=[];do{(e=new Qr(t)).isEmpty||this.parts.push(e)}while(t.is("part-head"))}},{key:"eachStaff",value:function(t){this.parts.forEach((function(e,r){e.staves.forEach((function(e,n){return t(e,n,r)}))}))}},{key:"mapStaff",value:function(t){var e=[];return this.eachStaff((function(r,n,o){return e.push(t(r,n,o))})),e}},{key:"fillStaves",value:function(){var t=Math.max.apply(null,this.mapStaff((function(t){return t.cells.length})));t<=0||this.eachStaff((function(e){if(e.cells.length!==t){var r=t-e.cells.length;e.cells=e.cells.concat(f(r).map((function(){return new lr})))}}))}},{key:"makeMeasures",value:function(){if(this.parts.length){var t=this.parts[0].staves[0].cells.length,e=f(t).map((function(){return{parts:[]}}));this.eachStaff((function(t,r,n){e.forEach((function(e,o){e.parts[n]=e.parts[n]||{};var i=e.parts[n];i.staves=i.staves||[],i.staves[r]=t.cells[o]}))})),this.measures=e.map((function(t){return new Vr(t)}))}else this.measures=[]}},{key:"toString",value:function(){return 1===this.parts.length?this.parts[0].singlePartToString():this.parts.join("\n\n")}}])&&Xr(e.prototype,r),n&&Xr(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),_r=[];function $r(){var t=this.obj,e=this.context;switch(t.name){case"score":cn(t,e);break;case"part":sn(t,e);break;case"staff":fn(t,e);break;case"cell":ln(t,e);break;case"note":yn(t,e)}}function tn(){}function en(){_r.forEach(clearTimeout),_r.length=0}var rn=function(t,e,r,n,o){var i=o.currentTime,u=o.createGain();u.connect(o.destination),u.gain.setValueAtTime(0,t+i),u.gain.linearRampToValueAtTime(.5,t+i+.05),u.gain.linearRampToValueAtTime(.5,t+i+r-.05),u.gain.linearRampToValueAtTime(0,t+i+r-.01);var a=o.createOscillator();a.frequency.value=e,a.connect(u),a.start(i+t),a.stop(i+t+r),n&&(a.onended=n)},nn=function(t){var e=t.dt,r=t.pitch,n=[{dt:e,pitch:r}],o=function(){var t=(r||e).tie;e=t.nextNote,r=t.nextPitch};for(o();e;)n.push({dt:e,pitch:r}),o();return n},on=function(t,e,r){e.forEach((function(t){var e=t.dt,r=t.pitch;r?r.onplay():e.onplay()}));var n=s(e.map((function(t){var e=t.dt;return an(e)})));rn(0,t.frequency,n,(function(){return e.forEach((function(t){var e=t.dt,r=t.pitch;r?r.onstop():e.onstop()}))}),r)},un=function(t){t.forEach((function(t){var e=t.dt;"chord"===e.name&&e.onplay()}));var e=s(t.map((function(t){var e=t.dt;return an(e)})));setTimeout((function(){t.forEach((function(t){var e=t.dt;"chord"===e.name&&e.onstop()}))}),1e3*e)},an=function(t){return t.duration.seconds},cn=function(t,e){t.body.parts.forEach((function(t){return sn(t,e)}))},sn=function(t,e){t.staves.forEach((function(t){return fn(t,e)}))},fn=function(t,e){t.cells.forEach((function(t){t.data.forEach((function(t){switch(t.name){case"note":return yn(t,e);case"chord":return pn(t,e)}}))}))},ln=function(t,e){t.data.forEach((function(t){switch(t.name){case"note":yn(t,e);break;case"rest":break;case"chord":pn(t,e)}}))},yn=function(t,e){var r=t.pitch;t.duration;_r.push(setTimeout((function(){var n=t.tie;if(n){if("begin"!==n.type)return;var o=nn({dt:t});on(r,o,e),un(o)}else{t.onplay();var i=an(t);rn(0,r.frequency,i,(function(){return t.onstop()}),e)}}),1e3*t.t))},pn=function(t,e){var r=an(t);_r.push(setTimeout((function(){if(t.tie&&"begin"===t.tie.type){var n=nn({dt:t});un(n)}else t.onplay(),setTimeout((function(){return t.onstop()}),1e3*an(t));t.pitches.forEach((function(n){if(n.tie){if("begin"!==n.tie.type)return;var o=nn({dt:t,pitch:n});on(n,o,e)}else n.onplay(),rn(0,n.frequency,r,(function(){return n.onstop()}),e)}))}),1e3*t.t))};function hn(t){return(hn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function bn(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,mn(n.key),n)}}function vn(t,e,r){return(e=mn(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function mn(t){var e=function(t,e){if("object"!==hn(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==hn(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===hn(e)?e:String(e)}var dn,gn=window.AudioContext||window.webkitAudioContext,wn=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),vn(this,"play",$r),vn(this,"pause",tn),vn(this,"stop",en),this.obj=e}var e,r,n;return e=t,(r=[{key:"context",get:function(){return dn||(dn=new gn)}}])&&bn(e.prototype,r),n&&bn(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function On(t){return(On="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Sn(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function jn(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(o=n.key,i=void 0,i=function(t,e){if("object"!==On(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==On(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(o,"string"),"symbol"===On(i)?i:String(i)),n)}var o,i}function Pn(t,e,r){return e&&jn(t.prototype,e),r&&jn(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}var kn=function(t){var e=t.split("-");return e.shift()+e.map((function(t){return t[0].toUpperCase()+t.substr(1)})).join("")},Ln=A({names:"[a-zA-Z\\d\\-, ]+",name:"[a-z\\-]+",string:"[a-zA-Z][a-zA-z\\d ]+",number:"[\\d\\.]+",unit:"(%|px)","{":"{",":":":","}":"}"}),xn=function(){function t(e,r,n){Sn(this,t),this.value=e,this.unit=r,this.factors=n}return Pn(t,[{key:"pxValue",get:function(){return"px"===this.unit?this.value:this.value*this.factors.baseSize/100}}]),t}(),En=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Sn(this,t),this.name="style",this.factors=r,this.rawValue={},this.parse(new Ln(e))}return Pn(t,[{key:"parse",value:function(t){var e,r=this;t.skipWhite();for(var n=function(){var n;t.token("names",(function(t){e=t.replace(/ +/g,"").split(",").map(kn)})),e.forEach((function(t){r.rawValue[t]=r.rawValue[t]||{}})),t.skipSS(),t.token("{"),t.nextLine();do{(n=r.getNameValue(t))&&e.forEach((function(t){r.rawValue[t][n.name]=n.value}))}while(n);t.token("}"),t.skipWhite()};!t.eof;)n()}},{key:"getNameValue",value:function(t){var e,r,n;if(t.skipSS(),t.is("name"))return t.token("name",(function(t){e=kn(t)})),t.skipSS(),t.token(":"),t.skipSS(),t.is("string")?t.token("string",(function(t){r=t.trim(),/ /.test(r)&&(r='"'.concat(r,'"'))})):t.is("number")&&(t.token("number",(function(t){r=+t})),t.optional("unit",(function(t){n=t})),n&&(r=new xn(r,n,this.factors))),t.skipSS(),t.eof||t.nextLine(),{name:e,value:r}}},{key:"value",get:function(){var t=this.rawValue;this.factors.baseSize=t.base.size.pxValue;var e=function(t){return t instanceof xn?t.pxValue:t},r={};for(var n in t){r[n]={};var o=t[n].size;for(var i in o&&(o=o.pxValue),t[n])switch(i){case"widthRatio":r[n].width=e(t[n][i]*o);break;case"heightRatio":r[n].height=e(t[n][i]*o);break;case"dxRatio":r[n].dx=e(t[n][i]*o);break;case"dyRatio":r[n].dy=e(t[n][i]*o);break;default:r[n][i]=e(t[n][i])}}return r}},{key:"add",value:function(e){var r=this,n=new t(e,this.factors).rawValue;Object.keys(n).forEach((function(t){var e=n[t];Object.assign(r.rawValue[t],e)}))}}]),t}(),Rn="base {\r\n  size: 18px\r\n}\r\n\r\ntitle-font {\r\n  family: Times New Roman\r\n  size: 120%\r\n  height-ratio: 0.9\r\n  dy-ratio: 0.75\r\n}\r\nsubtitle-font {\r\n  family: Times New Roman\r\n  size: 110%\r\n  width-ratio: 0.45\r\n  height-ratio: 0.9\r\n  dy-ratio: 0.8\r\n}\r\ncreator-font {\r\n  family: Times New Roman\r\n  size: 100%\r\n  width-ratio: 0.45\r\n  height-ratio: 0.9\r\n  dy-ratio: 0.8\r\n}\r\npart-name-font {\r\n  family: Times New Roman\r\n  size: 80%\r\n  width-ratio: 0.45\r\n  height-ratio: 0.9\r\n  dy-ratio: 0.8\r\n}\r\ntime-font {\r\n  family: Cadence\r\n  size: 100%\r\n  width-ratio: 0.45\r\n  height-ratio: 0.52\r\n  dy-ratio: 0.51\r\n}\r\nstep-font, rest-font {\r\n  family: Times New Roman\r\n  size: 100%\r\n  width-ratio: 0.45\r\n  height-ratio: 0.69\r\n  dy-ratio: 0.68\r\n}\r\naccidental-font {\r\n  family: Cadence\r\n  size: 90%\r\n  width-ratio: 0.3\r\n  height-ratio: 0.75\r\n  dx-ratio: 0.3\r\n  dy-ratio: 0.39\r\n  lift: 25%\r\n}\r\ntuplet-font {\r\n  family: Times New Roman\r\n  size: 90%\r\n  height-ratio: 0.9\r\n  dy-ratio: 0.75\r\n}\r\ndirection-font {\r\n  family: Times New Roman\r\n  size: 70%\r\n  height-ratio: 0.9\r\n  dy-ratio: 0.5\r\n}\r\ndynamics-font {\r\n  family: Cadence\r\n  size: 100%\r\n  width-ratio: 0.45\r\n  height-ratio: 0.52\r\n  dy-ratio: 0.51\r\n}\r\nlyrics-font {\r\n  family: Times New Roman\r\n  size: 90%\r\n  height-ratio: 0.9\r\n  dy-ratio: 0.75\r\n}\r\n\r\nscore {\r\n  width: 450px\r\n  margin-left: 20px\r\n  margin-top: 20px\r\n  margin-right: 20px\r\n  margin-bottom: 20px\r\n  head-body-sep: 20px\r\n}\r\n\r\nhead {\r\n  title-subtitle-sep: 70%\r\n  title-creator-sep: 75%\r\n  creators-sep: 30%\r\n}\r\n\r\nbody {\r\n  systems-sep: 200%\r\n}\r\n\r\nsystem {\r\n  align: justify  // left|justify|equal\r\n  staves-sep: 100%\r\n  part-name-padding-right: 30%\r\n}\r\n\r\nsystem-head {\r\n  braced-staves: Piano, test\r\n  brace-padding-right: 10%\r\n  brace-width: 30%\r\n  brace-stroke-width: 10%\r\n}\r\n\r\ncell {\r\n  padding-left: 60%\r\n  padding-right: 60%\r\n  data-sep: 30%\r\n  data-direction-sep: 30%\r\n}\r\n\r\nbar {\r\n  line-height: 100%\r\n  light-width: 5%\r\n  heavy-width: 15%\r\n  dot-size: 12%\r\n  lines-sep: 15%\r\n  dots-sep: 20%\r\n  line-dot-sep: 12%\r\n}\r\n\r\ntime {\r\n  line-height: 6%\r\n  line-ext: 5%\r\n  line-number-sep: 5%\r\n}\r\n\r\nnote {\r\n  pitch-beam-sep: 9%\r\n  pitch-line-sep: 60%\r\n  pitch-dot-sep: 6%\r\n}\r\n\r\nchord {\r\n  pitches-sep: 10%\r\n  tie-mode: single  // single|multiple\r\n}\r\n\r\nnote, chord {\r\n  pitch-tuplet-sep: 30%\r\n  data-lyric-sep: 50%\r\n  lyrics-v-sep: 50%\r\n  lyrics-h-sep: 50%\r\n}\r\n\r\ndirection {\r\n  tmp: 0\r\n}\r\n\r\npitch {\r\n  step-accidental-sep: 0%\r\n  step-octave-sep: 7%\r\n  octave-size: 12%\r\n  octaves-sep: 6%\r\n}\r\n\r\ndurationGE4 {\r\n  beam-height: 5%\r\n  beams-sep: 10%\r\n  dot-lift: 6%\r\n  dot-size: 12%\r\n  dots-sep: 10%\r\n}\r\n\r\ndurationLE2 {\r\n  line-width: 50%\r\n  line-height: 6%\r\n  lines-sep: 60%\r\n  line-dot-sep: 60%\r\n  dot-size: 12%\r\n  dots-sep: 60%\r\n}\r\n\r\ntie {\r\n  lift: 70%\r\n  stroke-width: 9%\r\n}\r\n\r\nslur {\r\n  lift: 70%\r\n  stroke-width: 9%\r\n}\r\n\r\ntuplet {\r\n  lift: 30%\r\n  stroke-width: 5%\r\n}\r\n";function Tn(t){return(Tn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Dn(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(o=n.key,i=void 0,i=function(t,e){if("object"!==Tn(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Tn(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(o,"string"),"symbol"===Tn(i)?i:String(i)),n)}var o,i}var An=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,r,n;return e=t,(r=[{key:"x1",get:function(){return this.x},set:function(t){this.x=t}},{key:"y1",get:function(){return this.y},set:function(t){this.y=t}},{key:"x2",get:function(){return this.x+this.width},set:function(t){this.x=t-this.width}},{key:"y2",get:function(){return this.y+this.height},set:function(t){this.y=t-this.height}},{key:"cx",get:function(){return this.x+this.width/2},set:function(t){this.x=t-this.width/2}},{key:"cy",get:function(){return this.y+this.height/2},set:function(t){this.y=t-this.height/2}},{key:"dx2",get:function(){return this.width-this.dx},set:function(t){this.dx=this.width-t}},{key:"dy2",get:function(){return this.height-this.dy},set:function(t){this.dy=this.height-t}},{key:"bx",get:function(){return this.x+this.dx},set:function(t){this.x=t-this.dx}},{key:"by",get:function(){return this.y+this.dy},set:function(t){this.y=t-this.dy}},{key:"position",set:function(t){Object.assign(this,t)}},{key:"wh",get:function(){return{width:this.width,height:this.height}}},{key:"xy",get:function(){return{x:this.x,y:this.y}}},{key:"xby",get:function(){return{x:this.x,y:this.by}}},{key:"cxby",get:function(){return{x:this.cx,y:this.by}}},{key:"x2by",get:function(){return{x:this.x2,y:this.by}}},{key:"x2cy",get:function(){return{x:this.x2,y:this.cy}}},{key:"cxcy",get:function(){return{x:this.cx,y:this.cy}}},{key:"rect",get:function(){return{x:this.x,y:this.y,width:this.width,height:this.height}}},{key:"circle",get:function(){return{cx:this.cx,cy:this.cy,r:this.r}}},{key:"toJSON",value:function(){return{name:this.name,x:this.x,y:this.y,width:this.width,height:this.height,x2:this.x2,y2:this.y2,cx:this.cx,cy:this.cy,bx:this.bx,by:this.by,dx:this.dx,dy:this.dy}}}])&&Dn(e.prototype,r),n&&Dn(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Nn(t){return(Nn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Bn(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(o=n.key,i=void 0,i=function(t,e){if("object"!==Nn(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Nn(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(o,"string"),"symbol"===Nn(i)?i:String(i)),n)}var o,i}function zn(t,e){return(zn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function Cn(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=Qn(t);if(e){var o=Qn(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return Mn(this,r)}}function Mn(t,e){if(e&&("object"===Nn(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Fn(t)}function Fn(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Qn(t){return(Qn=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Gn=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&zn(t,e)}(i,t);var e,r,n,o=Cn(i);function i(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(r=o.call(this)).name="text-layout",r.text=t,Object.assign(Fn(r),e),r.width=w(e,t).width,r}return e=i,r&&Bn(e.prototype,r),n&&Bn(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}(An);function Wn(t){return(Wn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Jn(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function qn(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Jn(Object(r),!0).forEach((function(e){Kn(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Jn(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function In(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Xn(n.key),n)}}function Vn(){return(Vn="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=Hn(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}}).apply(this,arguments)}function Un(t,e,r,n){return(Un="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,r,n){var o,i=Hn(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(n,r),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(n,e)){if(!o.writable)return!1;o.value=r,Object.defineProperty(n,e,o)}else Kn(n,e,r);return!0})(t,e,r,n)}function Kn(t,e,r){return(e=Xn(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Xn(t){var e=function(t,e){if("object"!==Wn(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Wn(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Wn(e)?e:String(e)}function Hn(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=$n(t)););return t}function Zn(t,e){return(Zn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function Yn(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=$n(t);if(e){var o=$n(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return _n(this,r)}}function _n(t,e){if(e&&("object"===Wn(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function $n(t){return($n=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var to=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Zn(t,e)}(i,t);var e,r,n,o=Yn(i);function i(t,e){var r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(r=o.call(this)).name="head-layout",r.head=t,r.style=e;var n=t.title,u=t.subtitle,a=t.composer,c=(t.arranger,t.lyricist);return n&&(r.titleLayout=new Gn(n,r.style.titleFont)),u&&(r.subtitleLayout=new Gn(u,r.style.subtitleFont)),a&&(r.composerLayout=new Gn(a,r.style.creatorFont)),c&&(r.lyricistLayout=new Gn(c,r.style.creatorFont)),r.setSize(),r}return e=i,(r=[{key:"setSize",value:function(){var t=this.head,e=t.title,r=t.subtitle,n=t.composer,o=t.lyricist,i=this.style.score,u=i.width,a=i.marginLeft,c=i.marginRight,s=this.style.head,f=s.titleSubtitleSep,l=s.titleCreatorSep,y=s.creatorsSep,p=0;e&&(p+=this.titleLayout.height),e&&r&&(p+=f),r&&(p+=this.subtitleLayout.height),(e||r)&&(n||o)&&(p+=l),n&&(p+=this.composerLayout.height),n&&o&&(p+=y),o&&(p+=this.lyricistLayout.height),this.width=u-a-c,this.height=p}},{key:"position",set:function(t){var e=this.head,r=e.title,n=e.subtitle,o=e.composer,u=e.lyricist,a=this.style.head,c=a.titleSubtitleSep,s=a.titleCreatorSep,f=a.creatorsSep;!function(t,e,r,n,o){if(!Un(t,e,r,n||t)&&o)throw new TypeError("failed to set property")}($n(i.prototype),"position",t,this,!0);var l=this.cx,y=this.x2,p=this.y,h=p;r&&(this.titleLayout.position={cx:l,y:p},h=this.titleLayout.y2),n&&(this.subtitleLayout.position={cx:l,y:r?h+c:p},h=this.subtitleLayout.y2),o&&(this.composerLayout.position={x2:y,y:h>p?h+s:p},h=this.composerLayout.y2),u&&(this.lyricistLayout.position={x2:y,y:o?h+f:r||n?h+s:p})}},{key:"toJSON",value:function(){var t=this.titleLayout,e=this.subtitleLayout,r=this.composerLayout;return qn(qn({},Vn($n(i.prototype),"toJSON",this).call(this)),{},{titleLayout:t,subtitleLayout:e,composerLayout:r})}}])&&In(e.prototype,r),n&&In(e,n),Object.defineProperty(e,"prototype",{writable:!1}),i}(An);function eo(t){return(eo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ro(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function no(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ro(Object(r),!0).forEach((function(e){so(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ro(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function oo(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function io(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,fo(n.key),n)}}function uo(t,e,r){return e&&io(t.prototype,e),r&&io(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function ao(){return(ao="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=lo(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}}).apply(this,arguments)}function co(t,e,r,n){return(co="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,r,n){var o,i=lo(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(n,r),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(n,e)){if(!o.writable)return!1;o.value=r,Object.defineProperty(n,e,o)}else so(n,e,r);return!0})(t,e,r,n)}function so(t,e,r){return(e=fo(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function fo(t){var e=function(t,e){if("object"!==eo(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==eo(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===eo(e)?e:String(e)}function lo(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=vo(t)););return t}function yo(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&po(t,e)}function po(t,e){return(po=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function ho(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=vo(t);if(e){var o=vo(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return bo(this,r)}}function bo(t,e){if(e&&("object"===eo(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function vo(t){return(vo=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var mo=function(t){yo(r,t);var e=ho(r);function r(t,n){var o;return oo(this,r),(o=e.call(this)).name="system-head-layout",o.head=t,o.style=n,o.setBracesLayouts(),o.partNamesLayouts=t.partHeads.map((function(e){var r="full"===t.nameType?e.partName:e.abbreviation;return new Gn(r,n.partNameFont)})),o.setWidth(),o}return uo(r,[{key:"setBracesLayouts",value:function(){var t=this,e=this.head,r=e.partHeads,n=e.partsToCellsIndices;n&&n.forEach((function(e,n){if("Piano"===r[n].partName&&e.length>=2){t.bracesLayouts=t.bracesLayouts||[];var o=new go(t.style);o.cs=[e[0],u(e)],t.bracesLayouts.push(o)}}))}},{key:"setWidth",value:function(){var t=this.style.system.partNamePaddingRight;if(this.width=c(this.partNamesLayouts.map((function(t){return t.width}))),this.width&&(this.width+=t),this.bracesLayouts){var e=this.style.systemHead,r=e.bracePaddingRight,n=e.braceWidth;this.width+=r+n}}},{key:"setBracesHeight",value:function(){var t=this;this.bracesLayouts.forEach((function(e){var r=e.cs;e.height=t.staves.by0s[r[1]]-t.staves.by0s[r[0]]+t.style.bar.lineHeight,e.by0=t.staves.by0s[r[1]]}))}},{key:"position",set:function(t){var e=this;!function(t,e,r,n,o){if(!co(t,e,r,n||t)&&o)throw new TypeError("failed to set property")}(vo(r.prototype),"position",t,this,!0);var n=this.x2,o=this.y;if(this.staves){var i=this.staves.by0s.map((function(t,e){return o+t})),a=n-this.style.system.partNamePaddingRight;if(this.bracesLayouts){var c=this.style.systemHead,s=c.bracePaddingRight,f=c.braceWidth;a-=s+f}var l=this.staves.partsToCellsIndices,y=this.style.bar.lineHeight;this.partNamesLayouts.forEach((function(t,e){var r=l[e],n=i[r[0]]-y,o=i[u(r)];t.position={x2:a,cy:(n+o)/2}})),this.bracesLayouts&&(this.setBracesHeight(),this.bracesLayouts.forEach((function(t){t.position={x2:n-e.style.systemHead.bracePaddingRight,y2:o+t.by0}})))}}},{key:"toJSON",value:function(){var t=this.partNamesLayouts,e=this.bracesLayouts;return no(no({},ao(vo(r.prototype),"toJSON",this).call(this)),{},{partNamesLayouts:t,bracesLayouts:e})}}]),r}(An),go=function(t){yo(r,t);var e=ho(r);function r(t){var n;return oo(this,r),(n=e.call(this)).style=t,n.width=t.systemHead.braceWidth,n.strokeWidth=t.systemHead.braceStrokeWidth,n}return uo(r)}(An);function wo(t){return(wo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Oo(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(o=n.key,i=void 0,i=function(t,e){if("object"!==wo(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==wo(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(o,"string"),"symbol"===wo(i)?i:String(i)),n)}var o,i}function So(t,e){return(So=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function jo(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=Lo(t);if(e){var o=Lo(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return Po(this,r)}}function Po(t,e){if(e&&("object"===wo(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return ko(t)}function ko(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Lo(t){return(Lo=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var xo=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&So(t,e)}(i,t);var e,r,n,o=jo(i);function i(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(r=o.call(this)).name="layout",Object.assign(ko(r),e,t),r}return e=i,r&&Oo(e.prototype,r),n&&Oo(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}(An);function Eo(t){return(Eo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ro(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(o=n.key,i=void 0,i=function(t,e){if("object"!==Eo(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Eo(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(o,"string"),"symbol"===Eo(i)?i:String(i)),n)}var o,i}function To(t,e){return(To=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function Do(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=Bo(t);if(e){var o=Bo(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return Ao(this,r)}}function Ao(t,e){if(e&&("object"===Eo(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return No(t)}function No(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Bo(t){return(Bo=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var zo=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&To(t,e)}(i,t);var e,r,n,o=Do(i);function i(t,e){var r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(r=o.call(this)).name="tie-layout",r.tie=t,t.layout=No(r),r.style=e;var n=e.tie,u=n.lift,a=n.strokeWidth;return r.lift=u,r.strokeWidth=a,r}return e=i,(r=[{key:"nextTie",get:function(){var t=this.style.chord.tieMode,e=this.tie,r=e.note,n=e.nextNote;return"single"===t&&"note"===r.name&&"chord"===n.name?n.tie:this.tie.next}},{key:"showPrev",get:function(){var t=this.tie.prev;return t&&t.layout.sys!==this.sys}},{key:"endPoints",get:function(){var t,e,r=this.x1,n=this.y1,o=this.nextTie;if(o)if(this.sys===o.layout.sys)t=o.layout.x1,e=o.layout.y1;else{var i=this.tie.cell.layout,u=i.shownRightBarLayout||i.rightBarLayout;t=u.x,e=u.y}else t=r+30,e=n-20;return this.width=t-r,this.height=Math.abs(e-n),{x1:r,y1:n,x2:t,y2:e}}},{key:"prevEndPoints",get:function(){var t=this.x,e=this.y,r=this.tie.cell.layout.shownLeftBarLayout;return{x1:t,y1:e,x2:r.x,y2:r.y}}}])&&Ro(e.prototype,r),n&&Ro(e,n),Object.defineProperty(e,"prototype",{writable:!1}),i}(An);function Co(t){return(Co="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Mo(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Fo(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Mo(Object(r),!0).forEach((function(e){Vo(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Mo(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Qo(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Go(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Uo(n.key),n)}}function Wo(t,e,r){return e&&Go(t.prototype,e),r&&Go(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function Jo(){return(Jo="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=Ko(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}}).apply(this,arguments)}function qo(t,e,r,n){return(qo="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,r,n){var o,i=Ko(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(n,r),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(n,e)){if(!o.writable)return!1;o.value=r,Object.defineProperty(n,e,o)}else Vo(n,e,r);return!0})(t,e,r,n)}function Io(t,e,r,n,o){if(!qo(t,e,r,n||t)&&o)throw new TypeError("failed to set property");return r}function Vo(t,e,r){return(e=Uo(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Uo(t){var e=function(t,e){if("object"!==Co(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Co(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Co(e)?e:String(e)}function Ko(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=$o(t)););return t}function Xo(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Ho(t,e)}function Ho(t,e){return(Ho=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function Zo(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=$o(t);if(e){var o=$o(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return Yo(this,r)}}function Yo(t,e){if(e&&("object"===Co(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return _o(t)}function _o(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function $o(t){return($o=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var ti={"#":"","##":"",n:"",b:"",bb:""},ei=function(t){Xo(r,t);var e=Zo(r);function r(t,n){var o;Qo(this,r),(o=e.call(this)).name="pitch-layout",o.pitch=t,o.style=n;var i=t.step,u=t.accidental,a=t.octave,c=t.tie;return o.stepLayout=new ri(i,n),o.accidentalLayout=new ni(u,n),o.octavesLayout=new oi(a,n),c&&(o.tieLayout=new zo(c,n)),o.tieMode=n.chord.tieMode,o.setSize(),o}return Wo(r,[{key:"setSize",value:function(){var t=this.pitch,e=t.accidental,r=t.octave,n=this.stepLayout,o=n.width,i=n.height,u=e?this.accidentalLayout.width:0,a=(e&&this.accidentalLayout.height,r?this.octavesLayout.height:0),c=this.style.pitch,s=c.stepAccidentalSep,f=c.stepOctaveSep,l=(this.style.accidentalFont.lift,i),y=i+(r?a+f:0);this.width=o+(e?u+s:0),this.height=r>=0?Math.max(l,y):l+f+a,this.dx2=this.stepLayout.width/2,this.dy=this.height}},{key:"position",set:function(t){var e=this.pitch,n=e.accidental,o=e.octave,i=e.tie,u=this.style.pitch.stepOctaveSep,a=this.style.accidentalFont.lift;Io($o(r.prototype),"position",t,this,!0);var c=this.x,s=this.x2,f=this.y2-(o>=0?0:this.octavesLayout.height+u);this.stepLayout.position={x2:s,y2:f};var l=this.stepLayout,y=l.cx,p=l.y;if(n&&(this.accidentalLayout.position={x:c,y2:f-a}),o){var h=o>0?{cx:y,y2:p-u}:{cx:y,y:f+u};this.octavesLayout.position=h}if(i){var b=this.stepLayout,v=b.cx,m=b.y;this.tieLayout.position={x:v,y:m}}}},{key:"toJSON",value:function(){var t=this.stepLayout,e=this.accidentalLayout,n=this.octavesLayout,o=this.tieLayout;return Fo(Fo({},Jo($o(r.prototype),"toJSON",this).call(this)),{},{stepLayout:t,accidentalLayout:e,octavesLayout:n,tieLayout:o})}}]),r}(An),ri=function(t){Xo(r,t);var e=Zo(r);function r(t,n){var o;return Qo(this,r),(o=e.call(this)).name="step-layout",Object.assign(_o(o),n.stepFont),o}return Wo(r)}(An),ni=function(t){Xo(r,t);var e=Zo(r);function r(t,n){var o;return Qo(this,r),(o=e.call(this)).name="accidental-layout",Object.assign(_o(o),n.accidentalFont),o.char=ti[t],"bb"===o.accidental&&(o.dx=.66*n.accidentalFont.dx),o}return Wo(r)}(An),oi=function(t){Xo(r,t);var e=Zo(r);function r(t,n){var o;Qo(this,r),(o=e.call(this)).name="octaves-layout";var i=Math.abs(t),u=n.pitch,a=u.octaveSize,c=u.octavesSep;return o.octave=t,o.style=n,o.width=a,o.height=i*a+(i-1)*c,o.r=a/2,o}return Wo(r,[{key:"position",set:function(t){var e=this;Io($o(r.prototype),"position",t,this,!0);var n=this.style.pitch,o=n.octaveSize,i=n.octavesSep;this.layouts=[];var u=this.cx,a=this.y,c=this.width,s=this.r;f(Math.abs(this.octave)).forEach((function(){e.layouts.push(new xo({cx:u,y:a},{width:c,height:c,r:s})),a+=o+i}))}},{key:"toJSON",value:function(){return Fo(Fo({},Jo($o(r.prototype),"toJSON",this).call(this)),{},{layouts:this.layouts})}}]),r}(An);function ii(t){return(ii="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ui(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(o=n.key,i=void 0,i=function(t,e){if("object"!==ii(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==ii(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(o,"string"),"symbol"===ii(i)?i:String(i)),n)}var o,i}function ai(t,e){return(ai=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function ci(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=li(t);if(e){var o=li(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return si(this,r)}}function si(t,e){if(e&&("object"===ii(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return fi(t)}function fi(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function li(t){return(li=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var yi=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&ai(t,e)}(i,t);var e,r,n,o=ci(i);function i(t,e,r,n){var u;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(u=o.call(this)).name="beam-layout",u.beam=t,t.layout=fi(u),u.duration=e,u.dotsLayout=r,u.style=n,u.setSize(),u}return e=i,(r=[{key:"beamedWidth",get:function(){return this.beam.endBeam.layout.x2-this.x}},{key:"setSize",value:function(){var t=this.style,e=t.stepFont,r=t.note,n=t.durationGE4;this.width=e.width+(this.duration.dots?this.dotsLayout.width+r.pitchDotSep:0),this.height=n.beamHeight}}])&&ui(e.prototype,r),n&&ui(e,n),Object.defineProperty(e,"prototype",{writable:!1}),i}(An);function pi(t){return(pi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function hi(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function bi(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?hi(Object(r),!0).forEach((function(e){Si(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):hi(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function vi(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function mi(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,ji(n.key),n)}}function di(t,e,r){return e&&mi(t.prototype,e),r&&mi(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function gi(){return(gi="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=Pi(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}}).apply(this,arguments)}function wi(t,e,r,n){return(wi="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,r,n){var o,i=Pi(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(n,r),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(n,e)){if(!o.writable)return!1;o.value=r,Object.defineProperty(n,e,o)}else Si(n,e,r);return!0})(t,e,r,n)}function Oi(t,e,r,n,o){if(!wi(t,e,r,n||t)&&o)throw new TypeError("failed to set property");return r}function Si(t,e,r){return(e=ji(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function ji(t){var e=function(t,e){if("object"!==pi(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==pi(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===pi(e)?e:String(e)}function Pi(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Ri(t)););return t}function ki(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Li(t,e)}function Li(t,e){return(Li=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function xi(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=Ri(t);if(e){var o=Ri(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return Ei(this,r)}}function Ei(t,e){if(e&&("object"===pi(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Ri(t){return(Ri=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Ti=function(t){ki(r,t);var e=xi(r);function r(t,n){var o;vi(this,r),(o=e.call(this)).name="duration-layout",o.duration=t,o.style=n;var i=t.type;return t.dots&&(o.dotsLayout=new Ni(t,n)),i<4?o.linesLayout=new Di(t,n):i>4&&(o.beamsLayout=new Ai(t,o.dotsLayout,n)),o.setSize(),o}return di(r,[{key:"setSize",value:function(){var t=this.duration,e=t.type,r=t.dots;4===e?this.setType4Size(r):e>4?this.setTypeGt4Size(r):this.setTypeLt4Size(r),this.dy=this.height}},{key:"setTypeLt4Size",value:function(t){var e=this.linesLayout.width,r=this.linesLayout.height;if(t){var n=this.linesLayout,o=(n.width,n.height,this.dotsLayout.width),i=this.dotsLayout.height;this.width=e+this.style.durationLE2.lineDotSep+o,this.height=Math.max(r,i)}else this.width=e,this.height=r}},{key:"setType4Size",value:function(t){this.width=t?this.dotsLayout.width:0,this.height=t?this.dotsLayout.height:0}},{key:"setTypeGt4Size",value:function(t){if(this.width=this.beamsLayout.width,this.height=this.beamsLayout.height,t){var e=this.style.note.pitchBeamSep,r=this.style.durationGE4.dotLift;this.height+=e+r+this.dotsLayout.height}}},{key:"position",set:function(t){Oi(Ri(r.prototype),"position",t,this,!0);var e=this.duration,n=e.type,o=e.dots,i=this.style,u=(i.durationLE2,i.durationGE4,this.x),a=this.x2,c=this.y,s=this.cy,f=this.y2;n<4?(this.linesLayout.position={x:u,cy:s},o&&(this.dotsLayout.position={x2:a,cy:s})):(n>4&&(this.beamsLayout.position={x:u,y2:f}),o&&(this.dotsLayout.position={x2:a,y:c}))}},{key:"toJSON",value:function(){var t=this.beamsLayout,e=this.linesLayout,n=this.dotsLayout;return bi(bi({},gi(Ri(r.prototype),"toJSON",this).call(this)),{},{beamsLayout:t,linesLayout:e,dotsLayout:n})}}]),r}(An),Di=function(t){ki(r,t);var e=xi(r);function r(t,n){var o;return vi(this,r),(o=e.call(this)).name="lines-layout",o.duration=t,o.style=n,o.setLineSize(),o.setSize(t.type),o}return di(r,[{key:"setLineSize",value:function(){var t=this.style.durationLE2,e=t.lineWidth,r=t.lineHeight;this.lineSize={width:e,height:r}}},{key:"setSize",value:function(t){var e=this.style.durationLE2,r=e.lineWidth,n=e.linesSep,o=e.lineHeight;this.width=2===t?r:3*r+2*n,this.height=o}},{key:"position",set:function(t){var e=this;Oi(Ri(r.prototype),"position",t,this,!0);var n=this.duration,o=n.type,i=(n.dots,this.style.durationLE2),u=i.lineWidth,a=i.linesSep,c=this.x,s=this.cy;this.layouts=f(2===o?1:3).map((function(t){return new xo({x:c+t*(u+a),cy:s},e.lineSize)}))}}]),r}(An),Ai=function(t){ki(r,t);var e=xi(r);function r(t,n,o){var i;return vi(this,r),(i=e.call(this)).name="beams-layout",i.duration=t,i.dotsLayout=n,i.style=o,i.layouts=t.beams.map((function(e){return new yi(e,t,n,o)})),i.setSize(),i}return di(r,[{key:"setSize",value:function(){var t=this.duration.numBeams,e=this.style.durationGE4,r=e.beamHeight,n=e.beamsSep;this.width=this.layouts[0].width,this.height=t*r+(t-1)*n}},{key:"position",set:function(t){Oi(Ri(r.prototype),"position",t,this,!0);var e=this.x,n=this.y2,o=this.style.durationGE4,i=o.beamHeight,u=o.beamsSep;this.layouts.forEach((function(t,r){t.position={x:e,y2:n},n-=i+u}))}},{key:"toJSON",value:function(){return bi(bi({},gi(Ri(r.prototype),"toJSON",this).call(this)),{},{layouts:this.layouts})}}]),r}(An),Ni=function(t){ki(r,t);var e=xi(r);function r(t,n){var o;return vi(this,r),(o=e.call(this)).name="dots-layout",o.duration=t,o.style=n,o.setDotSize(t.type),o.setSize(t.type,t.dots),o}return di(r,[{key:"setDotSize",value:function(t){var e=this.style,r=e.durationGE4,n=e.durationLE2,o=t>=4?r.dotSize:n.dotSize;this.dotSize={width:o,height:o,r:o/2}}},{key:"setSize",value:function(t,e){var r=this.style,n=r.durationGE4,o=r.durationLE2,i=function(t){return e*t.dotSize+(e-1)*t.dotsSep};this.width=i(t>=4?n:o),this.height=this.dotSize.height}},{key:"position",set:function(t){var e=this;Oi(Ri(r.prototype),"position",t,this,!0);var n=this.duration,o=n.type,i=n.dots;if(o>=4){var u=this.style.durationGE4.dotsSep,a=this.x2,c=this.y;this.layouts=f(i).map((function(t){return new xo({x2:a-t*(e.dotSize.width+u),y:c},e.dotSize)}))}else{var s=this.style.durationLE2.dotsSep,l=this.x2,y=this.cy;this.layouts=f(i).map((function(t){return new xo({x2:l-t*(e.dotSize.width+s),cy:y},e.dotSize)}))}}},{key:"toJSON",value:function(){return bi(bi({},gi(Ri(r.prototype),"toJSON",this).call(this)),{},{layouts:this.layouts})}}]),r}(An);function Bi(t){return(Bi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function zi(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Ci(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?zi(Object(r),!0).forEach((function(e){Mi(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):zi(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Mi(t,e,r){return(e=Qi(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Fi(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Qi(n.key),n)}}function Qi(t){var e=function(t,e){if("object"!==Bi(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Bi(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Bi(e)?e:String(e)}function Gi(){return(Gi="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=Wi(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}}).apply(this,arguments)}function Wi(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Ui(t)););return t}function Ji(t,e){return(Ji=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function qi(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=Ui(t);if(e){var o=Ui(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return Ii(this,r)}}function Ii(t,e){if(e&&("object"===Bi(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Vi(t)}function Vi(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ui(t){return(Ui=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Ki=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Ji(t,e)}(i,t);var e,r,n,o=qi(i);function i(t,e){var r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(r=o.call(this)).name="tuplet-layout",r.tuplet=t,t.layout=Vi(r),r.style=e,r.textLayout=new Gn(t.actual,e.tupletFont);var n=e.tuplet,u=n.lift,a=n.strokeWidth;return r.lift=u,r.strokeWidth=a,r.pitchTupletSep=e.note.pitchTupletSep,r}return e=i,(r=[{key:"endPoints",get:function(){var t,e,r=this.x1,n=this.y1,o=this.tuplet.next;return o?(t=o.layout.x1,e=o.layout.y1):(t=r+30,e=n-20),this.textLayout.position={cx:(r+t)/2,cy:(n+e)/2-this.pitchTupletSep-this.lift},this.width=t-r,this.height=Math.abs(e-n),{x1:r,y1:n,x2:t,y2:e}}},{key:"toJSON",value:function(){var t=this.textLayout;return Ci(Ci({},Gi(Ui(i.prototype),"toJSON",this).call(this)),{},{textLayout:t})}}])&&Fi(e.prototype,r),n&&Fi(e,n),Object.defineProperty(e,"prototype",{writable:!1}),i}(An);function Xi(t){return(Xi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Hi(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(o=n.key,i=void 0,i=function(t,e){if("object"!==Xi(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Xi(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(o,"string"),"symbol"===Xi(i)?i:String(i)),n)}var o,i}function Zi(t,e){return(Zi=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function Yi(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=tu(t);if(e){var o=tu(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return _i(this,r)}}function _i(t,e){if(e&&("object"===Xi(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return $i(t)}function $i(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function tu(t){return(tu=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var eu=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Zi(t,e)}(i,t);var e,r,n,o=Yi(i);function i(t,e){var r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(r=o.call(this)).name="slur-layout",r.slur=t,t.layout=$i(r),r.style=e;var n=e.slur,u=n.lift,a=n.strokeWidth;return r.lift=u,r.strokeWidth=a,r}return e=i,(r=[{key:"showPrev",get:function(){var t=this.slur.prev;return!t||t.layout.sys!==this.sys}},{key:"endPoints",get:function(){var t,e,r=this.x1,n=this.y1,o=this.slur.next;if(o)if(this.sys===o.layout.sys)t=o.layout.x1,e=o.layout.y1;else{var i=u(this.systemLayout.measuresLayouts).cellsLayouts[this.c],a=i.shownRightBarLayout||i.rightBarLayout;t=a.x,e=a.y}else t=r+30,e=n-20;return this.width=t-r,this.height=Math.abs(e-n),{x1:r,y1:n,x2:t,y2:e}}},{key:"prevEndPoints",get:function(){var t=this.x,e=this.y;if(!this.slur.prev)return{x1:t,y1:e,x2:t-30,y2:e-20};var r=this.systemLayout.measuresLayouts[0].cellsLayouts[this.c].shownLeftBarLayout;return{x1:t,y1:e,x2:r.x,y2:r.y}}}])&&Hi(e.prototype,r),n&&Hi(e,n),Object.defineProperty(e,"prototype",{writable:!1}),i}(An);function ru(t){return(ru="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function nu(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function ou(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?nu(Object(r),!0).forEach((function(e){cu(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):nu(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function iu(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,su(n.key),n)}}function uu(){return(uu="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=fu(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}}).apply(this,arguments)}function au(t,e,r,n){return(au="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,r,n){var o,i=fu(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(n,r),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(n,e)){if(!o.writable)return!1;o.value=r,Object.defineProperty(n,e,o)}else cu(n,e,r);return!0})(t,e,r,n)}function cu(t,e,r){return(e=su(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function su(t){var e=function(t,e){if("object"!==ru(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==ru(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===ru(e)?e:String(e)}function fu(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=hu(t)););return t}function lu(t,e){return(lu=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function yu(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=hu(t);if(e){var o=hu(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return pu(this,r)}}function pu(t,e){if(e&&("object"===ru(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function hu(t){return(hu=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var bu=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&lu(t,e)}(i,t);var e,r,n,o=yu(i);function i(t,e){var r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(r=o.call(this)).name="note-layout",r.note=t,r.style=e,r.pitchLayout=new ei(t.pitch,e),r.durationLayout=new Ti(t.duration,e),r.setSize(t.duration,r.pitchLayout);var n=t.tie,u=t.tuplet,a=t.beginSlurs,c=t.endSlurs,s=t.lyrics;return n&&(r.tieLayout=new zo(n,e)),u&&(r.tupletLayout=new Ki(u,e)),a&&(r.beginSlursLayouts=a.map((function(t){return new eu(t,e)}))),c&&(r.endSlursLayouts=c.map((function(t){return new eu(t,e)}))),s&&(r.lyricsLayouts=s.map((function(t){var r=new Gn(t.text,e.lyricsFont);return r.lyric=t,t.layout=r,r.dx=r.width/2,r}))),r}return e=i,(r=[{key:"setSize",value:function(t,e){var r=t.type,n=t.dots;r<4?this.setTypeLt4Size(e):4===r?this.setType4Size(n,e):this.setTypeGt4Size(n,e),this.dx=e.dx;var o=(this.note||this.chord||this.rest).lyrics;if(o){var i=o.length,u=this.style.note,a=u.dataLyricSep+u.lyricsVSep*(i-1)+this.style.lyricsFont.height*i;this.height+=a,this.dy2=a}else this.dy=this.height}},{key:"setTypeLt4Size",value:function(t){var e=this.durationLayout,r=this.style.note.pitchLineSep;this.width=t.width+r+e.width,this.height=t.height}},{key:"setType4Size",value:function(t,e){var r=this.style.note.pitchDotSep,n=this.durationLayout;this.width=e.width+(t?n.width+r:0),this.height=e.height}},{key:"setTypeGt4Size",value:function(t,e){var r=this.style.note.pitchBeamSep,n=this.style.stepFont,o=this.durationLayout;this.width=e.width+(t?o.width-n.width:0),this.height=e.height+r+o.beamsLayout.height}},{key:"position",set:function(t){var e=this;!function(t,e,r,n,o){if(!au(t,e,r,n||t)&&o)throw new TypeError("failed to set property")}(hu(i.prototype),"position",t,this,!0);var r=this.note.pitch.octave,n=this.note.duration,o=n.type,u=n.dots,a=this.style.durationGE4.dotLift,c=this.x,s=this.y,f=this.x2,l=this.by,y=this.pitchLayout,p=y.stepLayout,h=y.octavesLayout;this.pitchLayout.position={x:c,y:s},o>4&&u&&r<0&&(this.durationLayout.beamsLayout.height+=h.height+this.style.pitch.stepOctaveSep,this.durationLayout.setSize()),this.durationLayout.position=4===o?{x2:f,by:p.by-a}:o>4?{x:p.x,by:l}:{x2:f,cy:p.cy};var b=this.note,v=b.tie,m=b.tuplet,d=b.beginSlurs,g=b.endSlurs,w=b.lyrics;if(v||m||d||g){var O=this.pitchLayout.stepLayout,S=O.cx,j=O.y;v&&(this.tieLayout.position={x:S,y:j}),m&&(this.tupletLayout.position={x:S,y:this.y}),d&&this.beginSlursLayouts.forEach((function(t){t.position={x:S,y:j}})),g&&this.endSlursLayouts.forEach((function(t){t.position={x:S,y:j}}))}if(w){var P=this.style.note,k=P.dataLyricSep,L=P.lyricsVSep,x=this.style.lyricsFont,E=x.dy,R=x.height,T=this.by+k+E;this.lyricsLayouts.forEach((function(t,r){t.position={cx:e.bx,by:T+(L+R)*r}}))}}},{key:"toJSON",value:function(){var t=this.pitchLayout,e=this.durationLayout;return ou(ou({},uu(hu(i.prototype),"toJSON",this).call(this)),{},{pitchLayout:t,durationLayout:e})}}])&&iu(e.prototype,r),n&&iu(e,n),Object.defineProperty(e,"prototype",{writable:!1}),i}(An);function vu(t){return(vu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function mu(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function du(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?mu(Object(r),!0).forEach((function(e){Du(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):mu(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function gu(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function wu(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Au(n.key),n)}}function Ou(t,e,r){return e&&wu(t.prototype,e),r&&wu(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function Su(){return(Su="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=Pu(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}}).apply(this,arguments)}function ju(t,e,r,n){return(ju="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,r,n){var o,i=Pu(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(n,r),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(n,e)){if(!o.writable)return!1;o.value=r,Object.defineProperty(n,e,o)}else Du(n,e,r);return!0})(t,e,r,n)}function Pu(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Tu(t)););return t}function ku(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Lu(t,e)}function Lu(t,e){return(Lu=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function xu(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=Tu(t);if(e){var o=Tu(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return Eu(this,r)}}function Eu(t,e){if(e&&("object"===vu(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Ru(t)}function Ru(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Tu(t){return(Tu=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Du(t,e,r){return(e=Au(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Au(t){var e=function(t,e){if("object"!==vu(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==vu(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===vu(e)?e:String(e)}var Nu=bu.prototype,Bu=Nu.setSize,zu=Nu.setTypeLt4Size,Cu=Nu.setType4Size,Mu=Nu.setTypeGt4Size,Fu=function(t){ku(r,t);var e=xu(r);function r(t,n){var o;return gu(this,r),Du(Ru(o=e.call(this)),"setSize",Bu),Du(Ru(o),"setTypeLt4Size",zu),Du(Ru(o),"setType4Size",Cu),Du(Ru(o),"setTypeGt4Size",Mu),o.name="rest-layout",o.rest=t,o.style=n,o.zeroLayout=new Qu(n),o.durationLayout=new Ti(t.duration,n),o.setSize(t.duration,o.zeroLayout),o}return Ou(r,[{key:"position",set:function(t){!function(t,e,r,n,o){if(!ju(t,e,r,n||t)&&o)throw new TypeError("failed to set property")}(Tu(r.prototype),"position",t,this,!0);var e=this.x,n=this.y,o=this.x2,i=this.y2,u=this.rest.duration.type,a=this.style.durationGE4.dotLift;this.zeroLayout.position={x:e,y:n},this.durationLayout.position=4===u?{x2:o,y2:this.zeroLayout.y2-a}:u>4?{x:this.zeroLayout.x,y2:i}:{x2:o,cy:this.zeroLayout.cy}}},{key:"toJSON",value:function(){var t=this.zeroLayout;return du(du({},Su(Tu(r.prototype),"toJSON",this).call(this)),{},{zeroLayout:t})}}]),r}(An),Qu=function(t){ku(r,t);var e=xu(r);function r(t){var n;return gu(this,r),n=e.call(this),Object.assign(Ru(n),t.restFont),n.dx=n.width/2,n}return Ou(r)}(An);function Gu(t){return(Gu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Wu(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Ju(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Wu(Object(r),!0).forEach((function(e){ra(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Wu(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function qu(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Iu(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,na(n.key),n)}}function Vu(t,e,r){return e&&Iu(t.prototype,e),r&&Iu(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function Uu(){return(Uu="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=Hu(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}}).apply(this,arguments)}function Ku(t,e,r,n){return(Ku="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,r,n){var o,i=Hu(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(n,r),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(n,e)){if(!o.writable)return!1;o.value=r,Object.defineProperty(n,e,o)}else ra(n,e,r);return!0})(t,e,r,n)}function Xu(t,e,r,n,o){if(!Ku(t,e,r,n||t)&&o)throw new TypeError("failed to set property");return r}function Hu(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=ea(t)););return t}function Zu(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Yu(t,e)}function Yu(t,e){return(Yu=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function _u(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=ea(t);if(e){var o=ea(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return $u(this,r)}}function $u(t,e){if(e&&("object"===Gu(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return ta(t)}function ta(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ea(t){return(ea=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ra(t,e,r){return(e=na(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function na(t){var e=function(t,e){if("object"!==Gu(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Gu(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Gu(e)?e:String(e)}var oa=bu.prototype,ia=oa.setSize,ua=oa.setTypeLt4Size,aa=oa.setType4Size,ca=oa.setTypeGt4Size,sa=function(t){Zu(r,t);var e=_u(r);function r(t,n){var o;qu(this,r),ra(ta(o=e.call(this)),"setSize",ia),ra(ta(o),"setTypeLt4Size",ua),ra(ta(o),"setType4Size",aa),ra(ta(o),"setTypeGt4Size",ca),o.name="chord-layout",o.chord=t,o.style=n,o.pitchesLayout=new fa(t.pitches,n),o.durationLayout=new Ti(t.duration,n),o.setSize(t.duration,o.pitchesLayout),o.tieMode=n.chord.tieMode;var i=t.tie,u=t.tuplet,a=t.beginSlurs,c=t.endSlurs,s=t.lyrics;return i&&(o.tieLayout=new zo(i,n)),u&&(o.tupletLayout=new Ki(u,n)),a&&(o.beginSlursLayouts=a.map((function(t){return new eu(t,n)}))),c&&(o.endSlursLayouts=c.map((function(t){return new eu(t,n)}))),s&&(o.lyricsLayouts=s.map((function(t){var e=new Gn(t.text,n.lyricsFont);return e.lyric=t,t.layout=e,e.dx=e.width/2,e}))),o}return Vu(r,[{key:"position",set:function(t){var e=this;Xu(ea(r.prototype),"position",t,this,!0);var n=this.x,o=this.y,i=this.x2,u=this.y2;this.pitchesLayout.position={x:n,y:o};var a=this.chord.pitches[0].octave,c=this.chord.duration,s=c.type,f=c.dots,l=this.style.durationGE4.dotLift,y=this.pitchesLayout.layouts[0],p=y.stepLayout,h=y.octavesLayout;s>4&&f&&a<0&&(this.durationLayout.beamsLayout.height+=h.height+this.style.pitch.stepOctaveSep,this.durationLayout.setSize()),this.durationLayout.position=4===s?{x2:i,y2:p.y2-l}:s>4?{x:p.x,y2:u}:{x2:i,cy:p.cy};var b=this.chord,v=b.tie,m=b.tuplet,d=b.beginSlurs,g=b.endSlurs,w=b.lyrics;if(v||m||d||g){var O=this.pitchesLayout.layouts[0].stepLayout.cx;v&&(this.tieLayout.position={x:O,y:o}),m&&(this.tupletLayout.position={x:O,y:this.y}),d&&this.beginSlursLayouts.forEach((function(t){t.position={x:O,y:o}})),g&&this.endSlursLayouts.forEach((function(t){t.position={x:O,y:o}}))}if(w){var S=this.style.chord,j=S.dataLyricSep,P=S.lyricsVSep,k=this.style.lyricsFont,L=k.dy,x=k.height,E=this.by+j+L;this.lyricsLayouts.forEach((function(t,r){t.position={cx:e.bx,by:E+(P+x)*r}}))}}},{key:"toJSON",value:function(){var t=this.pitchesLayout;return Ju(Ju({},Uu(ea(r.prototype),"toJSON",this).call(this)),{},{pitchesLayout:t})}}]),r}(An),fa=function(t){Zu(r,t);var e=_u(r);function r(t,n){var o;qu(this,r),(o=e.call(this)).pitches=t,o.style=n;var i=n.chord.pitchesSep,u=0,a=-i;return o.layouts=t.map((function(t){return new ei(t,n)})),o.layouts.forEach((function(t){u=Math.max(u,t.width),a+=t.height+i})),o.width=u,o.dx2=o.layouts[0].dx2,o.height=a,o}return Vu(r,[{key:"position",set:function(t){var e=this;Xu(ea(r.prototype),"position",t,this,!0);var n=this.x2,o=this.y2;this.layouts.forEach((function(t){t.position={x2:n,y2:o},o=t.y-e.style.chord.pitchesSep}))}},{key:"toJSON",value:function(){var t=this.layouts;return Ju(Ju({},Uu(ea(r.prototype),"toJSON",this).call(this)),{},{layouts:t})}}]),r}(An);function la(t){return(la="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ya(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(o=n.key,i=void 0,i=function(t,e){if("object"!==la(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==la(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(o,"string"),"symbol"===la(i)?i:String(i)),n)}var o,i}function pa(t,e){return(pa=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function ha(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=va(t);if(e){var o=va(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return ba(this,r)}}function ba(t,e){if(e&&("object"===la(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function va(t){return(va=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var ma=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&pa(t,e)}(i,t);var e,r,n,o=ha(i);function i(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(r=o.call(this)).name="multipart-layout",r.multipart=t,r.style=e,r.width=20,r.height=20,r}return e=i,r&&ya(e.prototype,r),n&&ya(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}(An);function da(t){return(da="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ga(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function wa(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ga(Object(r),!0).forEach((function(e){La(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ga(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Oa(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Sa(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,xa(n.key),n)}}function ja(t,e,r){return e&&Sa(t.prototype,e),r&&Sa(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function Pa(){return(Pa="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=Ea(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}}).apply(this,arguments)}function ka(t,e,r,n){return(ka="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,r,n){var o,i=Ea(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(n,r),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(n,e)){if(!o.writable)return!1;o.value=r,Object.defineProperty(n,e,o)}else La(n,e,r);return!0})(t,e,r,n)}function La(t,e,r){return(e=xa(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function xa(t){var e=function(t,e){if("object"!==da(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==da(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===da(e)?e:String(e)}function Ea(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Na(t)););return t}function Ra(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Ta(t,e)}function Ta(t,e){return(Ta=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function Da(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=Na(t);if(e){var o=Na(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return Aa(this,r)}}function Aa(t,e){if(e&&("object"===da(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Na(t){return(Na=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Ba=function(t){Ra(r,t);var e=Da(r);function r(t,n){var o;return Oa(this,r),(o=e.call(this)).name="time-layout",o.time=t,o.style=n,o.beatsLayout=new Gn(t.beats,n.timeFont),o.beatTypeLayout=new Gn(t.beatType,n.timeFont),o.lineLayout=new za(o.beatsLayout,o.beatTypeLayout,n),o.width=o.lineLayout.width,o.dx=o.width/2,o.setHeight(),o}return ja(r,[{key:"setHeight",value:function(){var t=this.style,e=t.time,r=t.timeFont,n=this.lineLayout.height;this.height=2*r.height+n+2*e.lineNumberSep,this.dy=this.height}},{key:"position",set:function(t){!function(t,e,r,n,o){if(!ka(t,e,r,n||t)&&o)throw new TypeError("failed to set property")}(Na(r.prototype),"position",t,this,!0);var e=this.cx,n=this.y,o=this.cy,i=this.y2;this.beatsLayout.position={cx:e,y:n},this.lineLayout.position={cx:e,cy:o},this.beatTypeLayout.position={cx:e,y2:i}}},{key:"toJSON",value:function(){var t=this.beatsLayout,e=this.lineLayout,n=this.beatTypeLayout;return wa(wa({},Pa(Na(r.prototype),"toJSON",this).call(this)),{},{beatsLayout:t,lineLayout:e,beatTypeLayout:n})}}]),r}(An),za=function(t){Ra(r,t);var e=Da(r);function r(t,n,o){var i;return Oa(this,r),(i=e.call(this)).width=Math.max(t.width,n.width)+2*o.time.lineExt,i.height=o.time.lineHeight,i}return ja(r)}(An);function Ca(t){return(Ca="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ma(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Qa(n.key),n)}}function Fa(t,e,r,n){return(Fa="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,r,n){var o,i=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=qa(t)););return t}(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(n,r),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(n,e)){if(!o.writable)return!1;o.value=r,Object.defineProperty(n,e,o)}else!function(t,e,r){(e=Qa(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r}(n,e,r);return!0})(t,e,r,n)}function Qa(t){var e=function(t,e){if("object"!==Ca(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Ca(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Ca(e)?e:String(e)}function Ga(t,e){return(Ga=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function Wa(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=qa(t);if(e){var o=qa(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return Ja(this,r)}}function Ja(t,e){if(e&&("object"===Ca(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function qa(t){return(qa=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Ia=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Ga(t,e)}(i,t);var e,r,n,o=Wa(i);function i(t,e){var r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(r=o.call(this)).name="direction-layout",r.direction=t,r.style=e;var n=t.words,u=t.dynamics;t.wedge;return n?r.textLayout=new Gn(n,e.directionFont):u&&(r.textLayout=new Gn(u,e.dynamicsFont)),r.setSize(),r}return e=i,(r=[{key:"setSize",value:function(){this.textLayout?(this.width=this.textLayout.width,this.height=this.textLayout.height):(this.width=20,this.height=0),this.dx=this.width/2,this.dy=this.height}},{key:"position",set:function(t){!function(t,e,r,n,o){if(!Fa(t,e,r,n||t)&&o)throw new TypeError("failed to set property")}(qa(i.prototype),"position",t,this,!0);var e=this.x,r=this.y;this.textLayout&&(this.textLayout.position={x:e,y:r})}}])&&Ma(e.prototype,r),n&&Ma(e,n),Object.defineProperty(e,"prototype",{writable:!1}),i}(An);function Va(t){return(Va="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ua(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Ka(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Ua(Object(r),!0).forEach((function(e){Ya(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Ua(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Xa(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,_a(n.key),n)}}function Ha(){return(Ha="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=$a(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}}).apply(this,arguments)}function Za(t,e,r,n){return(Za="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,r,n){var o,i=$a(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(n,r),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(n,e)){if(!o.writable)return!1;o.value=r,Object.defineProperty(n,e,o)}else Ya(n,e,r);return!0})(t,e,r,n)}function Ya(t,e,r){return(e=_a(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function _a(t){var e=function(t,e){if("object"!==Va(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Va(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Va(e)?e:String(e)}function $a(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=nc(t)););return t}function tc(t,e){return(tc=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function ec(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=nc(t);if(e){var o=nc(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return rc(this,r)}}function rc(t,e){if(e&&("object"===Va(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function nc(t){return(nc=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var oc=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&tc(t,e)}(i,t);var e,r,n,o=ec(i);function i(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(r=o.call(this)).name="bar-layout",r.bar=t,r.style=e,r.displayLines=!0,r.displayDots=!0,r.setSize(),r}return e=i,(r=[{key:"setHeight",value:function(t){this.height=t,this.lightSize.height=t,this.heavySize.height=t}},{key:"setSize",value:function(){var t=this.style.bar,e=t.lightWidth,r=t.heavyWidth,n=t.lineHeight,o=t.dotSize,i=t.linesSep,u=t.lineDotSep;this.lightSize={width:e,height:n},this.heavySize={width:r,height:n},this.dotSize={width:o,height:o,r:o/2};var a,c=function(){return e+i+r},s=function(){return c()+u+o};switch(this.bar.value){case"|":a=this.lightSize;break;case"||":a={width:2*e+i,height:n};break;case"|]":a={width:c(),height:n};break;case":|":case"|:":a={width:s(),height:n};break;case":|:":a={width:2*s()-r,height:n}}Object.assign(this,a,{dy:a.height})}},{key:"position",set:function(t){!function(t,e,r,n,o){if(!Za(t,e,r,n||t)&&o)throw new TypeError("failed to set property")}(nc(i.prototype),"position",t,this,!0);var e=this.bar.value,r=this.style.bar,n=this.x,o=this.y,u=this.cy,a=this.x2,c=new xo({x:n,y:o},this.lightSize);if(this.linesLayouts=[],"|"===e)this.linesLayouts=[c];else if("||"===e)this.linesLayouts=[c,new xo({x2:a,y:o},this.lightSize)];else if("|]"===e)this.linesLayouts=[c,new xo({x2:a,y:o},this.heavySize)];else if(":|"===e||":|:"===e){var s=n+r.dotSize/2,f=(r.dotsSep+r.dotSize)/2;this.dotsLayouts=[new xo({x:n,cy:u-f},this.dotSize),new xo({x:n,cy:u+f},this.dotSize)],s=n+r.dotSize+r.lineDotSep,this.linesLayouts=[new xo({x:s,y:o},this.lightSize),new xo({x:s+r.lightWidth+r.linesSep,y:o},this.heavySize)],":|:"===e&&(s+=r.lightWidth+2*r.linesSep+r.heavyWidth,this.linesLayouts.push(new xo({x:s,y:o},this.lightSize)))}if("|:"===e||":|:"===e){var l=(r.dotsSep+r.dotSize)/2;this.dotsLayouts=this.dotsLayouts||[],this.dotsLayouts.push(new xo({x2:a,cy:u-l},this.dotSize),new xo({x2:a,cy:u+l},this.dotSize)),"|:"===e&&(this.linesLayouts=[new xo({x:n,y:o},this.heavySize),new xo({x:n+r.heavyWidth+r.linesSep,y:o},this.lightSize)])}}},{key:"toJSON",value:function(){var t=this.linesLayouts,e=this.dotsLayouts;return Ka(Ka({},Ha(nc(i.prototype),"toJSON",this).call(this)),{},{linesLayouts:t,dotsLayouts:e})}}])&&Xa(e.prototype,r),n&&Xa(e,n),Object.defineProperty(e,"prototype",{writable:!1}),i}(An);function ic(t){return(ic="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function uc(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function ac(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?uc(Object(r),!0).forEach((function(e){hc(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):uc(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function cc(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function sc(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,bc(n.key),n)}}function fc(t,e,r){return e&&sc(t.prototype,e),r&&sc(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function lc(){return(lc="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=vc(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}}).apply(this,arguments)}function yc(t,e,r,n){return(yc="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,r,n){var o,i=vc(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(n,r),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(n,e)){if(!o.writable)return!1;o.value=r,Object.defineProperty(n,e,o)}else hc(n,e,r);return!0})(t,e,r,n)}function pc(t,e,r,n,o){if(!yc(t,e,r,n||t)&&o)throw new TypeError("failed to set property");return r}function hc(t,e,r){return(e=bc(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function bc(t){var e=function(t,e){if("object"!==ic(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==ic(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===ic(e)?e:String(e)}function vc(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Sc(t)););return t}function mc(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&dc(t,e)}function dc(t,e){return(dc=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function gc(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=Sc(t);if(e){var o=Sc(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return wc(this,r)}}function wc(t,e){if(e&&("object"===ic(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Oc(t)}function Oc(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Sc(t){return(Sc=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var jc={"|:":"|:",":|:":"|:","||":"||"},Pc={":|":":|",":|:":":|","||":"||","|]":"|]"},kc=function(t){mc(r,t);var e=gc(r);function r(t,n){var o;return cc(this,r),(o=e.call(this)).name="cell-layout",o.cell=t,t.layout=Oc(o),o.style=n,o.dataLayout=new Lc(t.data,n),o.leftBarLayout=new oc(t.leftBar,n),o.rightBarLayout=new oc(t.rightBar,n),o.sticks=[],o.dataLayout.sticks=o.sticks,o.height=Math.max(o.dataLayout.dy,o.rightBarLayout.height)+o.dataLayout.dy2,o.dy2=o.dataLayout.dy2,o}return fc(r,[{key:"addShownLeftBar",value:function(){var t=this.cell,e=t.leftBar.value;e=jc[e],t.shownLeftBar=new Ze(e),this.shownLeftBarLayout=new oc(t.shownLeftBar,this.style),this.setMinWidth()}},{key:"addShownRightBar",value:function(){var t=this.cell,e=t.rightBar.value;e=Pc[e],t.shownRightBar=new Ze(e),this.shownRightBarLayout=new oc(t.shownRightBar,this.style),this.setMinWidth()}},{key:"setMinWidth",value:function(){var t=this.style.cell,e=t.paddingLeft,r=t.paddingRight,n=this.cell,o=n.shownLeftBarLayout,i=n.shownRightBarLayout;this.minWidth=this.dataLayout.minWidth+e+r+(o?o.width:this.leftBarLayout.width/2)+(i?i.width:this.rightBarLayout.width/2),(!this.width||this.width<this.minWidth)&&(this.width=this.minWidth)}},{key:"reflow",value:function(t){var e=t-this.width;this.width=t,this.dataLayout.width+=e}},{key:"position",set:function(t){pc(Sc(r.prototype),"position",t,this,!0);var e=this.x,n=this.x2,o=this.by,i=this.style.cell,u=i.paddingLeft,a=i.paddingRight,c=this.shownLeftBarLayout,s=this.shownRightBarLayout;c&&(c.position={x:e,by:o},e+=c.width+u,this.dataLayout.position={x:e,by:o}),s?(s.position={x2:n,by:o},n=s.x-a,this.dataLayout.position={x2:n,by:o}):(this.rightBarLayout.position={cx:n,by:o},n=this.rightBarLayout.x-a,this.dataLayout.position={x2:n,by:o})}},{key:"toJSON",value:function(){var t=this.dataLayout,e=this.leftBarLayout,n=this.rightBarLayout;return ac(ac({},lc(Sc(r.prototype),"toJSON",this).call(this)),{},{dataLayout:t,leftBarLayout:e,rightBarLayout:n})}}]),r}(An),Lc=function(t){mc(r,t);var e=gc(r);function r(t,n){var o;return cc(this,r),(o=e.call(this)).name="data-layout",o.data=t,o.style=n,o.setLayouts(),o.width=o.minWidth,o.setHeight(),o}return fc(r,[{key:"setLayouts",value:function(){var t=this,e=this.data,r=this.style;this.layouts=[],e.forEach((function(e){switch(e.name){case"note":t.layouts.push(new bu(e,r));break;case"rest":t.layouts.push(new Fu(e,r));break;case"chord":t.layouts.push(new sa(e,r));break;case"multipart":t.layouts.push(new ma(e,r));break;case"time":t.layouts.push(new Ba(e,r));break;case"direction":t.layouts.push(new Ia(e,r))}}))}},{key:"setMinWidth",value:function(){var t=this.sticks[0],e=u(this.sticks);this.minWidth=t.dx+e.x+e.dx2,this.width=this.minWidth}},{key:"setHeight",value:function(){var t=c(this.layouts.map((function(t){return t.dy})).concat(0)),e=c(this.layouts.map((function(t){return t.dy2})).concat(0));this.height=t+e,this.dy=t}},{key:"position",set:function(t){pc(Sc(r.prototype),"position",t,this,!0);var e=this.style.cell,n=(e.dataSep,e.dataDirectionSep),o=this.x,i=this.by;this.sticks.forEach((function(t){var e=t.dirsAbove,r=t.main,u=t.dirsBelow,a=t.x,c=o+a;if(r&&(r.position={bx:c,by:i}),e&&e.length){var s=r.y-n;e[0].position={bx:c,y2:s}}if(u&&u.length){var f=i+n;u[0].position={bx:c,y:f}}}))}},{key:"toJSON",value:function(){var t=this.layouts;return ac(ac({},lc(Sc(r.prototype),"toJSON",this).call(this)),{},{layouts:t})}}]),r}(An);function xc(t){return(xc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ec(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Rc(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Ec(Object(r),!0).forEach((function(e){Nc(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Ec(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Tc(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Bc(n.key),n)}}function Dc(){return(Dc="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=zc(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}}).apply(this,arguments)}function Ac(t,e,r,n){return(Ac="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,r,n){var o,i=zc(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(n,r),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(n,e)){if(!o.writable)return!1;o.value=r,Object.defineProperty(n,e,o)}else Nc(n,e,r);return!0})(t,e,r,n)}function Nc(t,e,r){return(e=Bc(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Bc(t){var e=function(t,e){if("object"!==xc(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==xc(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===xc(e)?e:String(e)}function zc(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Qc(t)););return t}function Cc(t,e){return(Cc=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function Mc(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=Qc(t);if(e){var o=Qc(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return Fc(this,r)}}function Fc(t,e){if(e&&("object"===xc(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function Qc(t){return(Qc=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Gc=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Cc(t,e)}(i,t);var e,r,n,o=Mc(i);function i(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(r=o.call(this)).name="measure-layout",r.measure=t,r.style=e,r.cellsLayouts=t.cells.map((function(t){return new kc(t,e)})),r.makeSticks(),r.alignSticks(),r.setCellsSticks(),r.cellsLayouts.forEach((function(t){t.dataLayout.setMinWidth(),t.setMinWidth()})),r.minWidth=c(r.cellsLayouts.map((function(t){return t.minWidth}))),r.width=r.minWidth,r}return e=i,(r=[{key:"setHeight",value:function(t,e){this.height=t,this.staves=e}},{key:"reflow",value:function(t){this.width=t,this.cellsLayouts.forEach((function(e){return e.reflow(t)}));var e=this.cellsLayouts[0].dataLayout.width;Hc(this.sticks,e),this.setCellsSticks()}},{key:"position",set:function(t){var e=this;!function(t,e,r,n,o){if(!Ac(t,e,r,n||t)&&o)throw new TypeError("failed to set property")}(Qc(i.prototype),"position",t,this,!0);var r=this.x,n=this.x2,o=this.y;if(this.style.system.stavesSep,this.cellsLayouts.forEach((function(t,n){e.atSysBegin&&t.addShownLeftBar(),e.atSysEnd&&t.addShownRightBar(),t.position={x:r,by:o+e.staves.by0s[n]}})),this.atSysBegin){var u=this.cellsLayouts.length-1;if(!u)return;if(this.connectBars("left",[[0,u]]),!this.leftBarLayouts)return;this.leftBarLayouts.forEach((function(t){return t.position={x:r,y2:o+e.staves.by0s[t.lastCellIndex]}}))}else if(this.atSysEnd){if(this.connectBars("right",this.staves.partsToCellsIndices),!this.rightBarLayouts)return;this.rightBarLayouts.forEach((function(t,r){e.staves.partsToCellsIndices[r],t.position={x2:n,y2:o+e.staves.by0s[t.lastCellIndex]}}))}}},{key:"connectBars",value:function(t,e){var r=this,n=function(t){var e=t.shownLeftBarLayout,r=t.leftBarLayout;return e||r},o=function(t){var e=t.shownRightBarLayout,r=t.rightBarLayout;return e||r};e.forEach((function(e){if(!(e.length<2)){var i=[e[0],u(e)];!function(t,e){if(e[0]!==e[1]){var i=r.staves.by0s[e[1]]-r.staves.by0s[e[0]]+r.style.bar.lineHeight;if("left"===t){r.leftBarLayouts=r.leftBarLayouts||[];var u=n(r.cellsLayouts[e[0]]).bar.value,a=new oc(new Ze(u),r.style);a.setHeight(i),a.displayDots=!1,a.lastCellIndex=e[1],r.leftBarLayouts.push(a)}else if("right"===t){r.rightBarLayouts=r.rightBarLayouts||[];var c=o(r.cellsLayouts[e[0]]).bar.value,s=new oc(new Ze(c),r.style);s.setHeight(i),s.displayDots=!1,s.lastCellIndex=e[1],r.rightBarLayouts.push(s)}}}(t,i),f(i[0],i[1]+1).forEach((function(e){"left"===t?n(r.cellsLayouts[e]).displayLines=!1:"right"===t&&(o(r.cellsLayouts[e]).displayLines=!1)}))}}))}},{key:"makeSticks",value:function(){var t=this.cellsLayouts.map((function(t){return Wc(t)}));for(this.sticks=[];Jc(t);)this.sticks.push(qc(t))}},{key:"alignSticks",value:function(){var t=this;if(this.sticks.length){var e=this.sticks[0];Ic(e),e.x=e.minX=e.dx,Vc(u(this.sticks));var r=Uc(this.sticks);this.sticks.forEach((function(e,n){n>0&&Kc(r,e,t.sticks[n-1],t.style),Xc(r,e)}))}}},{key:"setCellsSticks",value:function(){var t=this;this.sticks.forEach((function(e){e.cells.forEach((function(r,n){var o=Object.assign({},r,e);delete o.cells,t.cellsLayouts[n].sticks.push(o)}))}))}},{key:"toJSON",value:function(){var t=this.cellsLayouts;return Rc(Rc({},Dc(Qc(i.prototype),"toJSON",this).call(this)),{},{cellsLayouts:t})}}])&&Tc(e.prototype,r),n&&Tc(e,n),Object.defineProperty(e,"prototype",{writable:!1}),i}(An),Wc=function(t){var e=[],r={dirsAbove:[],main:null,dirsBelow:[],lyrics:[]};return t.dataLayout.layouts.forEach((function(t){var n=t.note,o=t.rest,i=t.chord,u=t.time,a=t.direction,c=(t.multipart,n||o||i||u);c?(r.tcQ=c.tcQ,r.main=t,c.lyrics&&(r.lyrics=t.lyricsLayouts),e.push(r),r={dirsAbove:[],main:null,dirsBelow:[],lyrics:[]}):a&&(r.tcQ=a.tcQ,"above"===a.placement?r.dirsAbove.push(t):r.dirsBelow.push(t))})),e},Jc=function(t){for(var e=0;e<t.length;e++){if(t[e].length)return!0}return!1},qc=function(t){var e=t.map((function(t){return t[0]})),r=a(e.map((function(t){return t?t.tcQ:1/0}))),n=e.map((function(t){return t&&t.tcQ===r?t:null}));return t.forEach((function(t,e){n[e]&&t.shift()})),{cells:n,tcQ:r}},Ic=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"dx",r=0;t.cells.forEach((function(t){if(t){var n=t.main,o=(t.dirsAbove,t.dirsBelow,t.lyrics);n&&(r=Math.max(r,n[e])),o&&(r=c(o.map((function(t){return t[e]})).concat(r).filter((function(t){return void 0!==t}))))}})),t[e]=r},Vc=function(t){return Ic(t,"dx2")},Uc=function(t){var e={cells:[]},r=function(t,e,r){var n=e[r].length;n&&(t[r]?t[r].length<n&&(t[r]=l(n)):t[r]=l(n))};return t.forEach((function(t){t.cells.forEach((function(t,n){if(t){var o=e.cells[n]=e.cells[n]||{main:0};t.dirsAbove&&r(o,t,"dirsAbove"),t.dirsBelow&&r(o,t,"dirsBelow"),t.lyrics&&r(o,t,"lyrics")}}))})),e},Kc=function(t,e,r,n){var o=n.cell.dataSep,i=n.note.lyricsHSep,u=r.x+n.stepFont.width/2+o/2;e.cells.forEach((function(e,r){if(e){var n=t.cells[r],a=e.main,c=(e.dirsAbove,e.dirsBelow,e.lyrics);a&&(u=Math.max(u,n.main+o+a.dx)),c&&c.forEach((function(t,e){u=Math.max(u,n.lyrics[e]+i+t.dx)}))}})),e.x=u,e.minX=u},Xc=function(t,e){e.cells.forEach((function(r,n){if(r){var o=t.cells[n],i=r.main,u=(r.dirsAbove,r.dirsBelow,r.lyrics);i&&(o.main=e.x+i.dx2),u&&u.forEach((function(t,r){o.lyrics[r]=e.x+t.dx2}))}}))},Hc=function(t,e){if(!(t.length<=1)){var r,n,o,i=t[0],a=i.dx,c=i.minX,s=u(t),f=s.dx2,l=(s.minX,e-a-f);r=u(t).tcQ,n=t.length,o=function(t){var e=r?t.tcQ/r:1;return l*e+a},function(t,e){for(var r=t.length-1;r>=0;r--)e(t[r],r)}(t,(function(e,r){if(r!==n-1){var i=t[r+1],u=o(e),a=i.minX-e.minX,c=i.x-a;e.x=Math.min(u,c)}else e.x=o(e)})),t.forEach((function(e,r){if(0!==e.tcQ){var n=t[r-1],o=e.minX-n.minX;e.x-n.x<o&&(e.x=n.x+o)}else e.x=e.minX}))}};function Zc(t){return(Zc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Yc(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function _c(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Yc(Object(r),!0).forEach((function(e){rs(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Yc(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function $c(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,ns(n.key),n)}}function ts(){return(ts="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=os(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}}).apply(this,arguments)}function es(t,e,r,n){return(es="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,r,n){var o,i=os(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(n,r),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(n,e)){if(!o.writable)return!1;o.value=r,Object.defineProperty(n,e,o)}else rs(n,e,r);return!0})(t,e,r,n)}function rs(t,e,r){return(e=ns(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function ns(t){var e=function(t,e){if("object"!==Zc(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Zc(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Zc(e)?e:String(e)}function os(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=cs(t)););return t}function is(t,e){return(is=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function us(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=cs(t);if(e){var o=cs(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return as(this,r)}}function as(t,e){if(e&&("object"===Zc(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function cs(t){return(cs=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var ss=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&is(t,e)}(i,t);var e,r,n,o=us(i);function i(t,e,r){var n;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(n=o.call(this)).name="system-layout",n.headLayout=t,n.measures=e,n.style=r;var u=e.length;return n.measuresLayouts=e.map((function(t,e){var n=new Gc(t,r);return n.atSysBegin=0===e,n.atSysEnd=e===u-1,n})),n.setHeight(),n}return e=i,(r=[{key:"setHeight",value:function(){var t=this;if(this.measuresLayouts.length){var e=l(this.measuresLayouts[0].cellsLayouts.length),r=this.measuresLayouts[0].measure,n=r.partIndices,o=r.partsToCellsIndices;this.staves={partIndices:n,partsToCellsIndices:o,heights:e,dys:e.slice(),dy2s:e.slice(),y0s:[],by0s:[],y20s:[]},this.measuresLayouts.forEach((function(e){e.cellsLayouts.forEach((function(e,r){t.staves.dys[r]=Math.max(t.staves.dys[r],e.dy),t.staves.dy2s[r]=Math.max(t.staves.dy2s[r],e.dy2),t.staves.heights[r]=t.staves.dys[r]+t.staves.dy2s[r]}))})),this.setY0s(),this.height=u(this.staves.y20s),this.headLayout.height=this.height,this.headLayout.staves=this.staves,this.measuresLayouts.forEach((function(e){e.setHeight(t.height,t.staves)}))}else this.height=0}},{key:"setY0s",value:function(){var t=this,e=this.style.system.stavesSep,r=0;this.staves.heights.forEach((function(n,o){t.staves.y0s.push(r),t.staves.by0s.push(r+t.staves.dys[o]),t.staves.y20s.push(r+t.staves.heights[o]),r+=n+e}))}},{key:"position",set:function(t){!function(t,e,r,n,o){if(!es(t,e,r,n||t)&&o)throw new TypeError("failed to set property")}(cs(i.prototype),"position",t,this,!0);var e=this.x,r=this.y2;this.headLayout.position={x:e,y2:r},e+=this.headLayout.width,this.measuresLayouts.forEach((function(t){t.position={x:e,y2:r},e+=t.width}))}},{key:"toJSON",value:function(){var t=this.headLayout,e=this.measuresLayouts;return _c(_c({},ts(cs(i.prototype),"toJSON",this).call(this)),{},{headLayout:t,measuresLayouts:e})}}])&&$c(e.prototype,r),n&&$c(e,n),Object.defineProperty(e,"prototype",{writable:!1}),i}(An);function fs(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&ls(t,e)}function ls(t,e){return(ls=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function ys(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=hs(t);if(e){var o=hs(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return ps(this,r)}}function ps(t,e){if(e&&("object"===bs(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function hs(t){return(hs=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function bs(t){return(bs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function vs(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function ms(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(o=n.key,i=void 0,i=function(t,e){if("object"!==bs(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==bs(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(o,"string"),"symbol"===bs(i)?i:String(i)),n)}var o,i}function ds(t,e,r){return e&&ms(t.prototype,e),r&&ms(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}var gs=function(){function t(){vs(this,t)}return ds(t,[{key:"isBalanced",get:function(){return this.maxLen-this.minLen<=1}},{key:"maxLen",get:function(){return c(this.lines.map((function(t){return t.len})))}},{key:"minLen",get:function(){return a(this.lines.map((function(t){return t.len})))}}]),t}(),ws=function(t){fs(r,t);var e=ys(r);function r(t){var n,o=t.measures,i=t.fhsw,u=t.ahsw,a=t.style;return vs(this,r),(n=e.call(this)).measures=o,n.measureMinWidths=o.map((function(t){return new Gc(t,a)})).map((function(t){return t.minWidth})),n.fhsw=i,n.ahsw=u,n.lines=[],n}return ds(r,[{key:"lens",get:function(){return this.lines.map((function(t){return t.len}))},set:function(t){var e=this;t.length&&0!==t[0]&&(this.lines=[],t.forEach((function(t,r){var n=r?e.ahsw:e.fhsw;e.lines.push(new Os(n))})),this.set("mws","measureMinWidths",t),this.set("measures"),this.set("ws"),this.setIsObstacles())}},{key:"obstacleSectioning",value:function(){var t,e=this,r=[],n=0,o=!1;return this.lines.forEach((function(i,u){if(o)return n=u,void(o=!1);i.isObstacle&&(t=u,r.push(new Ss(e.lines.slice(n,t)))),o=i.isObstacle})),o||r.push(new Ss(this.lines.slice(n,this.lines.length))),r}},{key:"mergeSections",value:function(t){var e=(t=t.slice()).shift().lines;this.lines.forEach((function(r){if(r.isObstacle){e.push(r);var n=t.shift();n&&(e=e.concat(n.lines))}})),this.lines=e}},{key:"set",value:function(t,e,r){var n=this;if(e=e||t,"ws"!==t){var o,i=0;(r||this.lens).forEach((function(r,u){o=i+r,n.lines[u][t]=n[e].slice(i,o),i=o}))}else this.lines.forEach((function(t){t.ws=t.mws.slice()}))}},{key:"setIsObstacles",value:function(){var t=this;this.lines.forEach((function(e,r){if(0===r)e.isObstacle=!1;else{var n=t.lines[r-1];n.isObstacle?e.isObstacle=!1:e.isObstacle=u(n.mws)+e.mws[0]>e.sw}}))}}]),r}(gs),Os=function(){function t(e){vs(this,t),this.mws=[],this.ws=[],this.measures=[],this.sw=e}return ds(t,[{key:"len",get:function(){return this.mws.length}},{key:"optimizeMeasureWidths",value:function(){var t=this.sw,e=this.ws.map((function(t,e){return{i:e,w:t}})),r=function(r){var n=s(e.slice(r+1).map((function(t){return t.w})).concat(0)),o=(t-n)/(r+1);r<e.length-1&&(o=Math.min(o,e[r+1].w)),f(r+1).forEach((function(t){e[t].w=o}))};e.sort((function(t,e){return t.w-e.w}));for(var n=0;n<e.length&&(r(n),!(s(e.map((function(t){return t.w})))>=t));n++);e.sort((function(t,e){return t.i-e.i})),this.ws=e.map((function(t){return t.w}))}}]),t}(),Ss=function(t){fs(r,t);var e=ys(r);function r(t){var n;return vs(this,r),(n=e.call(this)).lines=t,n}return ds(r,[{key:"balanceReflow",value:function(){for(var t=this.lines,e=function(t,e){return t[e+1].unshift(t[e].pop())};!this.isBalanced;){var n=this.findMaxLenLineIndex(),o=t.map((function(t){return t.mws.slice()}));if(n===t.length-1)break;for(var i=n;i<t.length-1;i++)for(e(o,i);o.length>1&&s(o[i])>t[i].sw;)e(o,i);var a=new r(t.slice(0,t.length-1)).maxLen;if(u(o).length>a)break;if(s(u(o))>u(t).sw)break;this.updateLines(o)}}},{key:"equalReflow",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1/0,e=this.lines;if(e.length){var r=a(e.map((function(t){return t.sw}))),n=c(o(e.map((function(t){return t.mws})))),i=Math.floor(r/n),u=Math.ceil(s(e.map((function(t){return t.len})))/e.length);t=Math.min(t,i,u);var f,l,y=0,p=function(){f=e[y],l=e[y+1],f.len>t&&!l&&(l=new Os(f.sw),e.push(l))},h=function(t){l.mws.unshift(t.mws.pop()),l.ws.unshift(t.ws.pop()),l.measures.unshift(t.measures.pop())};for(p();l;){for(;f.len>t;)h(f);y++,p()}e.forEach((function(t){var r=c(e.map((function(t){return t.len}))),n=t.sw/r;t.ws=t.ws.map((function(){return n}))}))}}},{key:"findMaxLenLineIndex",value:function(){var t=this.maxLen;return function(t,e){for(var r=t.length-1;r>=0;r--)if(e(t[r],r))return r}(this.lines,(function(e){return e.len===t}))}},{key:"updateLines",value:function(t){var e=this.lines;e.forEach((function(e,r){e.mws=t[r],e.ws=e.mws.slice()}));for(var r=0;r<e.length-1;r++)for(var n=e[r],o=e[r+1];n.measures.length>n.mws.length;)o.measures.unshift(n.measures.pop())}}]),r}(gs);function js(t){return(js="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ps(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function ks(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Ps(Object(r),!0).forEach((function(e){Rs(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Ps(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Ls(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Ts(n.key),n)}}function xs(){return(xs="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=Ds(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}}).apply(this,arguments)}function Es(t,e,r,n){return(Es="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,r,n){var o,i=Ds(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(n,r),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(n,e)){if(!o.writable)return!1;o.value=r,Object.defineProperty(n,e,o)}else Rs(n,e,r);return!0})(t,e,r,n)}function Rs(t,e,r){return(e=Ts(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Ts(t){var e=function(t,e){if("object"!==js(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==js(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===js(e)?e:String(e)}function Ds(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=zs(t)););return t}function As(t,e){return(As=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function Ns(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=zs(t);if(e){var o=zs(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return Bs(this,r)}}function Bs(t,e){if(e&&("object"===js(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function zs(t){return(zs=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Cs=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&As(t,e)}(i,t);var e,r,n,o=Ns(i);function i(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),(r=o.call(this)).name="body-layout",r.parts=t.parts,r.measures=t.measures,r.style=e,r.setWidth(),r.makeSystemsLayouts(),r.markCurvesSys(),r.markLyricsSys(),r.setHeight(),r}return e=i,(r=[{key:"setWidth",value:function(){var t=this.style.score,e=t.width,r=t.marginLeft,n=t.marginRight;this.width=e-r-n}},{key:"setHeight",value:function(){var t=this.systemsLayouts;this.height=t.length?s(t.map((function(t){return t.height})))+(t.length-1)*this.style.body.systemsSep:0}},{key:"createSystemHeadLayout",value:function(t){var e={nameType:t,partHeads:this.parts.map((function(t){return t.head}))},r=this.measures[0];return r&&(e.partsToCellsIndices=r.partsToCellsIndices),new mo(e,this.style)}},{key:"makeSystemsLayouts",value:function(){var t=this,e=this.style.system.align,r=this.flowSystems();"justify"===e?(this.balanceSystems(r),r.lines.forEach((function(t){return t.optimizeMeasureWidths()}))):"equal"===e&&this.equalizeSystems(r),this.systemsLayouts=[],r.lines.forEach((function(e,r){var n=t.createSystemHeadLayout(r?"abbreviation":"full"),o=e.measures,i=new ss(n,o,t.style);i.width=t.width,t.systemsLayouts.push(i)})),"justify"!==e&&"equal"!==e||this.systemsLayouts.forEach((function(t,e){t.measuresLayouts.forEach((function(t,n){var o=r.lines[e].ws[n];t.reflow(o)}))}))}},{key:"flowSystems",value:function(){var t=this.width,e=this.createSystemHeadLayout("full").width,r=this.createSystemHeadLayout("abbreviation").width,n=new ws({measures:this.measures,fhsw:t-e,ahsw:t-r,style:this.style}),o=n.measureMinWidths,i=[],a=e;o.forEach((function(e,n){(a+=e)===t?(i.push(n+1),a=r):a>t&&(i.push(n),a=r+e)})),u(i)!==o.length&&i.push(o.length);for(var c=i.length-1;c>0;c--)i[c]=i[c]-i[c-1];return n.lens=i,n}},{key:"balanceSystems",value:function(t){t.isBalanced||t.obstacleSectioning().forEach((function(t){return t.balanceReflow()}))}},{key:"equalizeSystems",value:function(t){var e=t.obstacleSectioning();e.forEach((function(t){return t.equalReflow(1/0)})),t.mergeSections(e),t.lines.forEach((function(t){t.isObstacle&&t.optimizeMeasureWidths()}))}},{key:"markCurvesSys",value:function(){this.systemsLayouts.forEach((function(t,e){t.measuresLayouts.forEach((function(r){r.cellsLayouts.forEach((function(r,n){var o=function(r){r.systemLayout=t,r.sys=e,r.c=n};r.dataLayout.layouts.forEach((function(t){var e=t.tieLayout,r=t.beginSlursLayouts,n=t.endSlursLayouts,i=t.chord;e&&o(e),r&&r.forEach((function(t){return o(t)})),n&&n.forEach((function(t){return o(t)})),i&&t.pitchesLayout.layouts.forEach((function(t){t.tieLayout&&o(t.tieLayout)}))}))}))}))}))}},{key:"markLyricsSys",value:function(){this.systemsLayouts.forEach((function(t,e){t.measuresLayouts.forEach((function(t){t.cellsLayouts.forEach((function(t){t.dataLayout.layouts.forEach((function(t){var r=t.lyricsLayouts;r&&r.forEach((function(t){t.sys=e}))}))}))}))}))}},{key:"position",set:function(t){!function(t,e,r,n,o){if(!Es(t,e,r,n||t)&&o)throw new TypeError("failed to set property")}(zs(i.prototype),"position",t,this,!0);var e=this.style.body.systemsSep,r=this.x,n=this.y;this.systemsLayouts.forEach((function(t){t.position={x:r,y:n},n+=t.height+e}))}},{key:"toJSON",value:function(){var t=this.systemsLayouts;return ks(ks({},xs(zs(i.prototype),"toJSON",this).call(this)),{},{systemsLayouts:t})}}])&&Ls(e.prototype,r),n&&Ls(e,n),Object.defineProperty(e,"prototype",{writable:!1}),i}(An);function Ms(t){return(Ms="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Fs(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Qs(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Fs(Object(r),!0).forEach((function(e){Vs(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Fs(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Gs(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ws(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Us(n.key),n)}}function Js(t,e,r){return e&&Ws(t.prototype,e),r&&Ws(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function qs(){return(qs="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=Ks(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}}).apply(this,arguments)}function Is(t,e,r,n){return(Is="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,r,n){var o,i=Ks(t,e);if(i){if((o=Object.getOwnPropertyDescriptor(i,e)).set)return o.set.call(n,r),!0;if(!o.writable)return!1}if(o=Object.getOwnPropertyDescriptor(n,e)){if(!o.writable)return!1;o.value=r,Object.defineProperty(n,e,o)}else Vs(n,e,r);return!0})(t,e,r,n)}function Vs(t,e,r){return(e=Us(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Us(t){var e=function(t,e){if("object"!==Ms(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Ms(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Ms(e)?e:String(e)}function Ks(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=_s(t)););return t}function Xs(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Hs(t,e)}function Hs(t,e){return(Hs=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function Zs(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=_s(t);if(e){var o=_s(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return Ys(this,r)}}function Ys(t,e){if(e&&("object"===Ms(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _s(t){return(_s=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var $s=function(t){Xs(r,t);var e=Zs(r);function r(t){var n;Gs(this,r),(n=e.call(this)).name="score-layout",n.score=t;var o=n.style=t.style.value;return n.headLayout=new to(t.head,o),n.bodyLayout=new Cs(t.body,o),n.setSize(),n.innerLayout=new tf(n.height,o),n.position={x:0,y:0},n}return Js(r,[{key:"setSize",value:function(){var t=this.style.score,e=t.width,r=t.marginTop,n=t.marginBottom,o=t.headBodySep,i=this.headLayout.height,u=this.bodyLayout.height;this.width=e,this.height=r+n+i+u+(i&&u?o:0)}},{key:"position",set:function(t){!function(t,e,r,n,o){if(!Is(t,e,r,n||t)&&o)throw new TypeError("failed to set property")}(_s(r.prototype),"position",t,this,!0);var e=this.style.score,n=e.marginLeft,o=e.marginTop,i=e.headBodySep,u=this.headLayout.height;this.headLayout.position={x:n,y:o},this.bodyLayout.position={x:n,y:o+u+(u?i:0)},this.innerLayout.position={x:n,y:o}}},{key:"toJSON",value:function(){var t=this.innerLayout,e=this.headLayout,n=this.bodyLayout;return Qs(Qs({},qs(_s(r.prototype),"toJSON",this).call(this)),{},{innerLayout:t,headLayout:e,bodyLayout:n})}}]),r}(An),tf=function(t){Xs(r,t);var e=Zs(r);function r(t,n){var o;Gs(this,r),(o=e.call(this)).name="inner-layout";var i=n.score,u=i.width,a=i.marginLeft,c=i.marginRight,s=i.marginTop,f=i.marginBottom;return o.width=u-a-c,o.height=t-s-f,o}return Js(r)}(An);function ef(t){return(ef="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function rf(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function nf(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,af(n.key),n)}}function of(t,e,r){return e&&nf(t.prototype,e),r&&nf(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function uf(t,e,r){return(e=af(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function af(t){var e=function(t,e){if("object"!==ef(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==ef(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===ef(e)?e:String(e)}var cf=[],sf=cf.push,ff=cf.pop,lf=cf.shift,yf=cf.unshift,pf=cf.splice,hf=cf.reverse,bf=function(t){return t&&"appendChild"in t&&"removeChild"in t},vf=function(t){return t&&"element"===t.name&&"elName"in t},mf=y(["mousedown","mouseup","click","dblclick","mousemove","mouseover","mousewheel","mouseout","contextmenu","touchstart","touchmove","touchend","touchcancel","keydown","keypress","keyup","focus","blur","change","submit","scroll","resize","hashchange","load","unload","input"]),df=y(["text","number","password","textarea","color","range","date","datetime-local","month","week","time","email","file","search","tel","url","select-multiple","select-one"]),gf=y(["svg:a","animate","animateMotion","animateTransform","circle","clipPath","color-profile","defs","desc","discard","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","foreignObject","g","hatch","hatchpath","image","line","linearGradient","marker","mask","mesh","meshgradient","meshpatch","meshrow","metadata","mpath","path","pattern","polygon","polyline","radialGradient","rect","script","set","solidcolor","stop","style","svg","switch","symbol","text","textPath","title","tspan","unknown","use","view"]),wf=function(){function t(e){var r=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:2;rf(this,t),uf(this,"toJSON",v("elName","attrs","content")),this.name="element",this.level=n,this.indent=o,this.elName=e.elName,this.attrs=new Of(e.attrs),this.content=[],e.content.forEach((function(e){void 0===e?r.content.push("undefined"):null===e?r.content.push("null"):"element"===e.name?r.content.push(new t(e,n+1,o)):r.content.push(e)}))}return of(t,[{key:"eachChild",value:function(t){this.content.forEach(t)}},{key:"eachAttr",value:function(t){this.attrs.each(t)}},{key:"create",value:function(){var e,r=this.elName;this.content;return gf[r]?("svg:a"===r&&(r="a"),e=document.createElementNS("http://www.w3.org/2000/svg",r)):e=document.createElement(r),this.eachAttr((function(t,r){mf[r]?e.addEventListener(r,t):"value"===r?"function"==typeof t?(t({element:e,attrName:r}),df[e.type]&&e.addEventListener("input",(function(){t.data[t.dname]=e.value}))):e.value=t:"checked"===r&&"checkbox"===e.type?"function"==typeof t?(t({element:e,attrName:r}),e.addEventListener("input",(function(){t.data[t.dname]=e.checked}))):e.checked=t:"checkedValue"===r&&"radio"===e.type?(t({element:e,attrName:r}),e.addEventListener("input",(function(){t.data[t.dname]=e.value}))):"selectedIndex"===r?(t({element:e,attrName:r}),e.addEventListener("input",(function(){t.data[t.dname]=e.selectedIndex}))):"selectedOptions"===r?(t({element:e,attrName:r}),e.addEventListener("input",(function(){t.data[t.dname]=Array.from(e.selectedOptions).map((function(t){return{label:t.label,value:t.value,text:t.text}}))}))):"function"==typeof t?t({element:e,attrName:r}):"style"===r?(/\n/.test(t)&&(t=t.trim().replace(/ *\n */g,";")),e.setAttribute(r,t)):e.setAttribute(r,t)})),this.eachChild((function(r){if(r instanceof t)e.appendChild(r.create());else if("object"===ef(r))"html"in r?"function"==typeof r.html?r.html(e,"html"):e.innerHTML=r.html:e.appendChild(r);else if("function"==typeof r)r(e);else{var n=document.createTextNode(r);e.appendChild(n)}})),e}},{key:"toString",value:function(){var t=this.level,e=this.indent,r=this.elName,n=this.attrs,o=this.content,u=[];return t>0&&u.push("\n"+i(" ",t*e)),u.push("<".concat(r)),n.hasAttr&&u.push(" "+n),0===o.length?u.push("/>"):"element"!==o[0].name?u.push(">".concat(o,"</").concat(r,">")):(u.push(">",o.join("")),u.push("\n",i(" ",t*e),"</".concat(r,">"))),u.join("")}}]),t}(),Of=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};rf(this,t),uf(this,"toJSON",v("value")),this.name="attrs",this.value=e}return of(t,[{key:"hasAttr",get:function(){return Object.keys(this.value).length>0}},{key:"each",value:function(t){var e=this.value;Object.keys(e).forEach((function(r,n){return t(e[r],r,n)}))}},{key:"toString",value:function(){var t=[];for(var e in this.value)t.push("".concat(e,'="').concat(this.value[e],'"'));return t.join(" ")}}]),t}();function Sf(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];return Array.isArray(r)||(r=[r]),("object"!==ef(e)||vf(e)||bf(e))&&(e=[e]),Array.isArray(e)&&(r=e,e={}),{name:"element",elName:t,attrs:e,content:r=o(r)}}Sf.create=function(t,e,r){return new wf(Sf(t,e,r)).create()};var jf=function(){function t(e,r){rf(this,t),this.obj=e,this.name=r}return of(t,[{key:"create",value:function(t,e,r){var n=Sf.create(t,e,r);return this.obj[this.name]=n,n}}]),t}();Sf.assign=function(t,e){return new jf(t,e)};var Pf=function(){function t(e,r){rf(this,t),this.obj=e,this.name=r}return of(t,[{key:"create",value:function(t,e,r){var n=Sf.create(t,e,r);return this.obj[this.name]=this.obj[this.name]||[],this.obj[this.name].push(n),n}}]),t}();Sf.push=function(t,e){return new Pf(t,e)},Sf.html=function(t,e,r){return void 0===r&&(r=e,e={}),Sf(t,e,{html:r})},Sf.nbsp=function(t){return i(" ",t)};var kf=0,Lf=function(){return""+kf++},xf=function(t,e){return vf(t)&&(t=new wf(t).create()),t.dataset.key=e,t},Ef=function(){function t(e){var r=this;rf(this,t),this.defaultData=function(t){var e={},r={},n=Object.keys(t);n.forEach((function(r){var n=t[r],o="_".concat(r),i=n.get,u=n.el;i||u?Object.defineProperty(e,r,{get:function(){return o in this?this[o]:this[o]=(i||u).apply(this)}}):e[r]=n})),n.forEach((function(t){r[t]=e[t]}));var o={$collector:[]};return n.forEach((function(t){var e="_".concat(t);Object.defineProperty(o,t,{get:function(){return this.$collector.push(t),e in this?this[e]:r[t]},set:function(t){this[e]=t}})})),n.forEach((function(e){var r=t[e],n=r.get,i=r.el,u=r.dep;(n||i)&&(n||i).apply(o),u=p(o.$collector.concat(u||[])),o.$collector.length=0,u.length&&(t[e].dep=u)})),{data:t,defaultData:r}}(e).defaultData,Object.assign(this,e),this.cacheElements={},this.depGetters={},this.makeConnectors(),Object.keys(this.defaultData).forEach((function(t){r["_".concat(t)]=r.defaultData[t]}))}return of(t,[{key:"set",value:function(t,e){e(this[t]),this[t]=this[t]}},{key:"makeConnectors",value:function(){var t=this;Object.keys(this).forEach((function(e){"cacheElements"!==e&&"depGetters"!==e&&"defaultData"!==e&&t.hasOwnProperty(e)&&(t.cacheElements[e]=[],t["$".concat(e)]=t.makeConnector(e),t.makeAccessor(e))}))}},{key:"makeConnector",value:function(t){this[t].get;if(Array.isArray(this.defaultData[t]))return this.makeArrayConnector(t);if(this[t].el)return this.makeElConnector(t);var e=this,r=function(r,n){var o=e.cacheElements[t].length;if(e.cacheElements[t].push(r),n){var i="_".concat(t,"_html");e[i]=e[i]||[],e[i][o]=!0}e[t]=e[t]};return r.data=this,r.dname=t,r}},{key:"makeArrayConnector",value:function(t){var e=this,r=function r(n){e.cacheElements[t].push({parent:n,children:[],map:n.attrName?"":r._map.shift()}),e[t]=e[t]};r.data=this,r.dname=t,r._map=[];var n=function(t){return Sf("pre",JSON.stringify(t))};return r.map=function(t){return r._map.push(t||n),r},r}},{key:"makeElConnector",value:function(t){var e=this;return function(r){e.cacheElements[t].push({parent:r,child:null}),e[t]=e[t]}}},{key:"makeAccessor",value:function(t){var e=this,r="_".concat(t),n=this[t],o=n.get,i=n.set,u=n.el,a=n.dep;a&&a.forEach((function(r){e.depGetters[r]=e.depGetters[r]||[],e.depGetters[r].push(t)})),o&&a?Array.isArray(this.defaultData[t])?this.makeGetArrayAccessor(t,r,o,i):Object.defineProperty(this,t,{get:function(){return this[r]},set:function(e){this[r]=o.apply(this),i&&void 0!==e&&i.call(this,e),this.runSetter(t,this[t])}}):u&&a?Object.defineProperty(this,t,{get:u,set:function(){this.runElSetter(t)}}):(Array.isArray(n)?this.makeArrayAccessor(t,r):Object.defineProperty(this,t,{get:function(){return this[r]},set:function(e){this[r]=e,this.runSetter(t,e)}}),this[t]=n)}},{key:"alterArrayMethods",value:function(t,e){var r=this.cacheElements[t],n=this;return Object.assign(e,{push:function(){var e=this,o=Array.from(arguments);o.forEach((function(t){var n=Lf();e.keys.push(n),r.forEach((function(e){var r=xf(e.map(t));e.children.push(r),e.parent.appendChild(r)}))}));var i=sf.apply(this,o);return n.setDepProp(t),i},pop:function(){r.forEach((function(t){var e=t.children.pop();e&&t.parent.removeChild(e)})),this.keys.pop();var e=ff.apply(this);return n.setDepProp(t),e},shift:function(){r.forEach((function(t){var e=t.children.shift();e&&t.parent.removeChild(e)})),this.keys.shift();var e=lf.apply(this);return n.setDepProp(t),e},unshift:function(){var e=this,o=Array.from(arguments);o.slice().reverse().forEach((function(t){var n=Lf();e.keys.unshift(n),r.forEach((function(e){var r=xf(e.map(t),n);e.children.unshift(r),e.parent.prepend(r)}))}));var i=yf.apply(this,o);return n.setDepProp(t),i},splice:function(){var e=Array.from(arguments),r=pf.apply(this,e);return n.runArraySetter(t,this),r},reverse:function(){r.forEach((function(t){t.parent.textContent="",t.children.reverse(),t.children.forEach((function(e){t.parent.appendChild(e)}))})),this.keys.reverse();var e=hf.apply(this);return n.setDepProp(t),e},indexOfEl:function(t){var e=function(t){for(var e;t;){if(e=t.dataset.key)return e;t=t.parentNode}}(t);return this.keys.indexOf(e)},itemOfEl:function(t){return this[this.indexOfEl(t)]},removeAt:function(t){if(t>-1)return this.splice(t,1)},remove:function(t){var e=this.findIndex((function(e){return e===t}));return this.removeAt(e)}}),e}},{key:"makeArrayAccessor",value:function(t,e){Object.defineProperty(this,t,{get:function(){return this[e]},set:function(r){this[e]=this.alterArrayMethods(t,r),this.runArraySetter(t,r)}})}},{key:"makeGetArrayAccessor",value:function(t,e,r,n){Object.defineProperty(this,t,{get:function(){return this[e]},set:function(o){o=this[e]=r.apply(this)||[],n&&n.call(this,o),this[e]=this.alterArrayMethods(t,o),this.runArraySetter(t,o)}})}},{key:"runSetter",value:function(t,e){var r=this;this.cacheElements[t].forEach((function(n,o){var i,u="_".concat(t,"_html");n.attrName&&(i=n.attrName,n=n.element),"value"===i?n!==document.activeElement&&(n.value=e):"checked"===i?n.checked=e:"checkedValue"===i?n.value===e&&(n.checked=!0):"selectedIndex"===i||(i?n.setAttribute(i,e):r[u]&&r[u][o]?n.innerHTML=e:n.textContent=e)})),this.setDepProp(t)}},{key:"runArraySetter",value:function(t,e){e.keys=e.map(Lf),this.cacheElements[t].forEach((function(t){t.parent.attrName||(t.parent.textContent="",t.children.length=0,t.children=e.map((function(r,n){var o=xf(t.map(r,n),e.keys[n]);return t.parent.appendChild(o),o})))})),this.setDepProp(t)}},{key:"runElSetter",value:function(t){var e=this;this.cacheElements[t];this.cacheElements[t].forEach((function(r){r.child&&r.parent.removeChild(r.child);var n=e[t];vf(n)&&(n=new wf(n).create()),r.child=n,r.parent.appendChild(n)})),this.setDepProp(t)}},{key:"setDepProp",value:function(t){var e=this;this.depGetters[t]&&this.depGetters[t].forEach((function(t){/^__link_/.test(t)?e[t]():e[t]=void 0}))}}]),t}();Sf.setData=function(t){return new Ef(t)};var Rf=0,Tf=function(){return"__link_"+Rf++};Sf.linkData=function(){var t=Array.from(arguments),e=t.shift(),r=t.pop(),n=Tf();t.forEach((function(t){e.depGetters[t].push(n),e[n]=r}))},Sf.linkData=function(){var t=Array.from(arguments),e=t.pop(),r=Df(t);r.forEach((function(t){var r=t.shift(),n=t,o=Tf();n.forEach((function(t){r.depGetters[t]=r.depGetters[t]||[],r.depGetters[t].push(o),r[o]=e}))})),e()};var Df=function(t){var e=[],r=[];return t.forEach((function(t){switch(ef(t)){case"object":r.length>=2&&e.push(r),r=[t];break;case"string":r.push(t);break;default:throw new TypeError("Incorrect el.linkData parameter ".concat(t,"."))}})),e.push(r),e};function Af(t){return(Af="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Nf(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Bf(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Nf(Object(r),!0).forEach((function(e){zf(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Nf(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function zf(t,e,r){return(e=function(t){var e=function(t,e){if("object"!==Af(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Af(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Af(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Cf(t){return(Cf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Mf(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Ff(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Mf(Object(r),!0).forEach((function(e){Qf(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Mf(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Qf(t,e,r){return(e=function(t){var e=function(t,e){if("object"!==Cf(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Cf(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Cf(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Gf(t){var e=t.titleLayout,r=t.subtitleLayout,n=t.composerLayout,o=t.lyricistLayout,i=(t.arrangerLayout,t.head),u=i.title,a=i.subtitle,c=i.composer,s=i.lyricist,f=(i.arranger,function(t){var e=t.family,r=t.size,n=t.anchor;return"\n    font-family: ".concat(e,"\n    font-size: ").concat(r,"\n    text-anchor: ").concat(n,"\n  ")});return Sf.create("g",[u?Sf("text",Ff(Ff({},e.cxby),{},{style:f(Ff(Ff({},e),{},{anchor:"middle"}))}),u):[],a?Sf("text",Ff(Ff({},r.cxby),{},{style:f(Ff(Ff({},r),{},{anchor:"middle"}))}),a):[],c?Sf("text",Ff(Ff({},n.x2by),{},{style:f(Ff(Ff({},n),{},{anchor:"end"}))}),c):[],s?Sf("text",Ff(Ff({},o.x2by),{},{style:f(Ff(Ff({},o),{},{anchor:"end"}))}),s):[]])}function Wf(t){return(Wf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Jf(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(o=n.key,i=void 0,i=function(t,e){if("object"!==Wf(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Wf(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(o,"string"),"symbol"===Wf(i)?i:String(i)),n)}var o,i}var qf=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.data=""}var e,r,n;return e=t,(r=[{key:"moveTo",value:function(t,e){return this.data+="M".concat(t," ").concat(e),this}},{key:"moveBy",value:function(t,e){return this.data+="m".concat(t," ").concat(e),this}},{key:"lineTo",value:function(t,e){return this.data+="L".concat(t," ").concat(e),this}},{key:"lineBy",value:function(t,e){return this.data+="l".concat(t," ").concat(e),this}},{key:"horiTo",value:function(t){return this.data+="H".concat(t),this}},{key:"horiBy",value:function(t){return this.data+="h".concat(t),this}},{key:"vertTo",value:function(t){return this.data+="V".concat(t),this}},{key:"vertBy",value:function(t){return this.data+="v".concat(t),this}},{key:"curveTo",value:function(t,e,r,n,o,i){return this.data+="C".concat(t," ").concat(e,",").concat(r," ").concat(n,",").concat(o,", ").concat(i),this}},{key:"curveBy",value:function(t,e,r,n,o,i){return this.data+="C".concat(t," ").concat(e,",").concat(r," ").concat(n,",").concat(o,", ").concat(i),this}},{key:"close",value:function(){return this.data+="Z",this}},{key:"lines",value:function(t){var e=this;return Array.isArray(t)||(t=[t]),t.forEach((function(t){var r=t.x,n=t.y;e.moveTo(r[0],n[0]),r.forEach((function(t,r){return e.lineTo(t,n[r])}))})),this.data}},{key:"toString",value:function(){return this.data}}])&&Jf(e.prototype,r),n&&Jf(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function If(){return new qf}var Vf=[.923,.923,.334,.334,.334,.495,.99,.997,1,1,1,.963,.936,.923,.9,.883,.241,.0268,.0268,.0268,.656,.656,.656,.495,0,0,0,.495,.656,.656,.656,.0268,.0268,.0268,.241,.883,.9,.923,.936,.963,1,1,1,.997,.99,.495,.334,.334,.334,.923,.923,.923,.709,.0803,.709,.923,.923],Uf=[.354,.273,.194,.116,.0763,.0382,.00399,.00356,.00285,.00242,.00114,0,0,0,143e-6,.00114,.045,.0957,.147,.229,.309,.388,.428,.465,.499,.5,.501,.535,.572,.612,.691,.77,.853,.904,.955,.999,1,1,1,1,.999,.998,.997,.996,.996,.962,.924,.884,.806,.727,.646,.594,.544,.5,.456,.406,.354],Kf=function(t,e){return Sf("path",{d:If().moveTo(t[0],e[0]).curveTo(t[1],e[1],t[2],e[2],t[3],e[3]).curveTo(t[4],e[4],t[5],e[5],t[6],e[6]).curveTo(t[7],e[7],t[8],e[8],t[9],e[9]).curveTo(t[10],e[10],t[11],e[11],t[12],e[12]).curveTo(t[13],e[13],t[14],e[14],t[15],e[15]).curveTo(t[16],e[16],t[17],e[17],t[18],e[18]).curveTo(t[19],e[19],t[20],e[20],t[21],e[21]).curveTo(t[22],e[22],t[23],e[23],t[24],e[24]).lineTo(t[25],e[25]).lineTo(t[26],e[26]).curveTo(t[27],e[27],t[28],e[28],t[29],e[29]).curveTo(t[30],e[30],t[31],e[31],t[32],e[32]).curveTo(t[33],e[33],t[34],e[34],t[35],e[35]).curveTo(t[36],e[36],t[37],e[37],t[38],e[38]).curveTo(t[39],e[39],t[40],e[40],t[41],e[41]).curveTo(t[42],e[42],t[43],e[43],t[44],e[44]).curveTo(t[45],e[45],t[46],e[46],t[47],e[47]).curveTo(t[48],e[48],t[49],e[49],t[50],e[50]).curveTo(t[51],e[51],t[52],e[52],t[53],e[53]).curveTo(t[54],e[54],t[55],e[55],t[56],e[56]),style:"fill: black"})};function Xf(t){var e=t.x,r=t.y,n=t.width,o=t.height,i=(t.strokeWidth,function(t,e,r){return Vf.map((function(r){return t+r*e}))}(e,n)),u=function(t,e){return Uf.map((function(r){return t+r*e}))}(r,o);return Sf.create("g",[Kf(i,u)])}function Hf(t){return(Hf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Zf(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Yf(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Zf(Object(r),!0).forEach((function(e){_f(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Zf(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function _f(t,e,r){return(e=function(t){var e=function(t,e){if("object"!==Hf(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==Hf(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===Hf(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function $f(t){var e,r=t.tie,n=t.slur,o=t.lift,i=t.strokeWidth;r?e=t.showPrev?t.prevEndPoints:t.endPoints:n&&(e="("===n.value?t.endPoints:t.prevEndPoints);var u=e,a=u.x1,c=u.y1,s=u.x2,f=u.y2,l=s-a,y=f-c,p=a+l/6,h=c+y/6-o,b=s-l/6,v=f-y/6-o,m=p,d=h+i,g=b,w=v+i,O=.1*i,S=Sf.create("path",{d:If().moveTo(a,c).horiBy(-O).curveTo(p,h,b,v,s,f).horiBy(-O).curveTo(g,w,m,d,a,c).close(),style:"fill: black"}),j=function(t){S.style.fill=t};return r?(r.onplay=function(){return j("#b5c")},r.onstop=function(){return j("black")}):n&&(n.onplay=function(){return j("#b5c")},n.onstop=function(){return j("black")}),Sf.create("g",[S])}function tl(t){return(tl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function el(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function rl(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?el(Object(r),!0).forEach((function(e){nl(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):el(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function nl(t,e,r){return(e=function(t){var e=function(t,e){if("object"!==tl(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==tl(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===tl(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function ol(t){var e=t.pitch,r=t.stepLayout,n=t.accidentalLayout,o=t.octavesLayout,i=t.tieLayout,u=t.tieMode,a="\n    font-family: ".concat(r.family,"\n    font-size: ").concat(r.size,"\n    text-anchor: middle\n  "),c="\n    font-family: ".concat(n.family,"\n    font-size: ").concat(n.size,"\n    text-anchor: middle\n  "),s={},f=function(t){s.step.style.fill=t,e.accidental&&(s.accidental.style.fill=t),e.octave&&s.octaves.forEach((function(e){e.style.fill=t}))};return e.onplay=function(){return f("#b5c")},e.onstop=function(){return f("black")},Sf.create("g",[Sf.assign(s,"step").create("text",rl(rl({},r.cxby),{},{style:a}),e.step),e.accidental?Sf.assign(s,"accidental").create("text",rl(rl({},n.cxby),{},{style:c}),n.char):[],e.octave?o.layouts.map((function(t){return Sf.push(s,"octaves").create("circle",t.circle)})):[],function(t){return!(!t||"single"===u)&&("end"!==t.tie.type||t.showPrev)}(i)?$f(i):[]])}function il(t){var e=t.linesLayout,r=t.beamsLayout,n=t.dotsLayout,i=t.duration,u=i.type,a=i.dots,c={},s=function(t){u<4?c.lines.forEach((function(e){e.style.fill=t})):c.beams&&c.beams.forEach((function(e){e.style.fill=t})),a&&c.dots.forEach((function(e){e.style.fill=t}))};return i.onplay=function(){return s("#b5c")},i.onstop=function(){return s("black")},Sf.create("g",[u<4?e.layouts.map((function(t){return Sf.push(c,"lines").create("rect",t.rect)})):[],u>4?o(r.layouts.map((function(t){var e=t.beam.type;if("single"===e||"begin"===e){var r=Object.assign({},t.rect);return"begin"===e&&(r.width=t.beamedWidth),Sf.push(c,"beams").create("rect",r)}return[]}))):[],a?n.layouts.map((function(t){return Sf.push(c,"dots").create("circle",t.circle)})):[]])}function ul(t){return(ul="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function al(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function cl(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?al(Object(r),!0).forEach((function(e){sl(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):al(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function sl(t,e,r){return(e=function(t){var e=function(t,e){if("object"!==ul(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==ul(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===ul(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function fl(t){var e=t.tuplet,r=t.textLayout,n=t.lift,o=t.strokeWidth,i=t.pitchTupletSep,u=t.endPoints,a=u.x1,c=u.y1,s=u.x2,f=u.y2,l=(a+s)/2,y=r.width/2,p=(f-c)/(s-a),h=l-y-3,b=(c-=i)-n+p*(h-a),v=l+y+3,m=(f-=i)-n+p*(v-s),d=Sf.create("path",{d:If().moveTo(a,c).vertBy(-n).lineTo(h,b).moveTo(s,f).vertBy(-n).lineTo(v,m),style:"stroke-width: ".concat(o,"; stroke: black; fill: none")}),g={},w=function(t){d.style.stroke=t,g.text.style.fill=t};e.onplay=function(){return w("#b5c")},e.onstop=function(){return w("black")};var O,S,j;return Sf.create("g",[d,Sf.assign(g,"text").create("text",cl(cl({},r.cxcy),{},{style:(O=r,S=O.family,j=O.size,"\n    font-family: ".concat(S,"\n    font-size: ").concat(j,"\n    text-anchor: middle\n    alignment-baseline: middle\n  "))}),r.text)])}function ll(t){return(ll="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function yl(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function pl(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?yl(Object(r),!0).forEach((function(e){hl(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):yl(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function hl(t,e,r){return(e=function(t){var e=function(t,e){if("object"!==ll(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==ll(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===ll(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function bl(t){return(bl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function vl(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function ml(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?vl(Object(r),!0).forEach((function(e){dl(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):vl(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function dl(t,e,r){return(e=function(t){var e=function(t,e){if("object"!==bl(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==bl(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===bl(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function gl(t){return(gl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function wl(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Ol(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?wl(Object(r),!0).forEach((function(e){Sl(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):wl(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Sl(t,e,r){return(e=function(t){var e=function(t,e){if("object"!==gl(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==gl(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===gl(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function jl(t){return(jl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Pl(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function kl(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Pl(Object(r),!0).forEach((function(e){Ll(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Pl(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Ll(t,e,r){return(e=function(t){var e=function(t,e){if("object"!==jl(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==jl(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===jl(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function xl(t){return(xl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function El(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function Rl(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?El(Object(r),!0).forEach((function(e){Tl(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):El(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function Tl(t,e,r){return(e=function(t){var e=function(t,e){if("object"!==xl(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==xl(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===xl(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Dl(t){t.bar;var e=t.linesLayouts,r=t.dotsLayouts,n=t.displayLines,o=t.displayDots;return Sf.create("g",[n?e.map((function(t){return Sf("rect",t.rect)})):[],o&&r?r.map((function(t){return Sf("circle",t.circle)})):[]])}function Al(t){var e=t.dataLayout,r=t.shownLeftBarLayout,n=t.rightBarLayout,i=t.shownRightBarLayout;return Sf.create("g",[e.layouts.map((function(t){return"note"in t?(r=(e=t).note,n=e.pitchLayout,i=e.durationLayout,u=e.tieLayout,a=e.tupletLayout,c=e.beginSlursLayouts,s=e.endSlursLayouts,f=e.lyricsLayouts,l=function(t){var e=t.family,r=t.size,n=t.anchor;return"\n    font-family: ".concat(e,"\n    font-size: ").concat(r,"\n    text-anchor: ").concat(n||"begin","\n  ")},y={},p=function(t){var e=y.lyrics,r=y.hyphens;e&&e.forEach((function(e){return e.style.fill=t})),r&&r.forEach((function(e){return e.style.fill=t}))},r.onplay=function(){return p("orange")},r.onstop=function(){return p("black")},Sf.create("g",[ol(n),il(i),function(t){return!!t&&("end"!==t.tie.type||t.showPrev)}(u)?$f(u):[],function(t){return t&&"begin"===t.tuplet.type}(a)?fl(a):[],c?c.map((function(t){return $f(t)})):[],s?o(s.map((function(t){return t.showPrev?$f(t):[]}))):[],f?f.map((function(t){return Sf.push(y,"lyrics").create("text",pl(pl({},t.cxby),{},{style:l(pl(pl({},t),{},{anchor:"middle"}))}),t.text)})):[],f?o(f.map((function(t){var e=t.lyric;if(!e.next)return[];var r=t.x2,n=t.by;if(e.layout.sys!==e.next.layout.sys)return Sf.push(y,"hyphens").create("text",{x:r+2,y:n,style:l(t)},"-");var o=e.next.layout;if(o){var i=o.x;return Sf.push(y,"hyphens").create("text",{x:(r+i)/2,y:n,style:l(pl(pl({},t),{},{anchor:"middle"}))},"-")}}))):[]])):"rest"in t?function(t){var e=t.zeroLayout,r=t.durationLayout,n="\n    font-family: ".concat(e.family,"\n    font-size: ").concat(e.size,"\n    text-anchor: middle\n  ");return Sf.create("g",[Sf("text",ml(ml({},t.zeroLayout.cxby),{},{style:n}),0),il(r)])}(t):"chord"in t?function(t){var e=t.chord,r=t.pitchesLayout,n=t.durationLayout,i=t.tieLayout,u=t.tupletLayout,a=t.tieMode,c=t.beginSlursLayouts,s=t.endSlursLayouts,f=t.lyricsLayouts,l=function(t){var e=t.family,r=t.size,n=t.anchor;return"\n    font-family: ".concat(e,"\n    font-size: ").concat(r,"\n    text-anchor: ").concat(n||"begin","\n  ")},y={},p=function(t){var e=y.lyrics,r=y.hyphens;e&&e.forEach((function(e){return e.style.fill=t})),r&&r.forEach((function(e){return e.style.fill=t}))};return e.onplay=function(){return p("orange")},e.onstop=function(){return p("black")},Sf.create("g",[r.layouts.map((function(t){return ol(t)})),il(n),function(t){return!("single"!==a||!t)&&("end"!==t.tie.type||t.showPrev)}(i)?$f(i):[],function(t){return t&&"begin"===t.tuplet.type}(u)?fl(u):[],c?c.map((function(t){return $f(t)})):[],s?o(s.map((function(t){return t.showPrev?$f(t):[]}))):[],f?f.map((function(t){return Sf.push(y,"lyrics").create("text",Ol(Ol({},t.cxby),{},{style:l(Ol(Ol({},t),{},{anchor:"middle"}))}),t.text)})):[],f?o(f.map((function(t){var e=t.lyric;if(!e.next)return[];var r=t.x2,n=t.by;if(e.layout.sys!==e.next.layout.sys)return Sf.push(y,"hyphens").create("text",{x:r+2,y:n,style:l(t)},"-");var o=e.next.layout;if(o){var i=o.x;return Sf.push(y,"hyphens").create("text",{x:(r+i)/2,y:n,style:l(Ol(Ol({},t),{},{anchor:"middle"}))},"-")}}))):[]])}(t):"time"in t?(b=(h=t).time,v=h.beatsLayout,m=h.lineLayout,d=h.beatTypeLayout,g="font-family: ".concat(v.family,"\n                font-size: ").concat(v.size,"\n                text-anchor: middle"),w="font-family: ".concat(d.family,"\n                font-size: ").concat(d.size,"\n                text-anchor: middle"),Sf.create("g",[Sf("text",kl(kl({},v.cxby),{},{style:g}),b.beats),Sf("rect",m.rect),Sf("text",kl(kl({},d.cxby),{},{style:w}),b.beatType)])):"direction"in t?(k=(O=t).direction,L=O.textLayout,x=k.words,E=k.dynamics,Sf.create("g",[L?Sf("text",Rl(Rl({},L.xby),{},{style:(S=L,j=S.family,P=S.size,"\n    font-family: ".concat(j,"\n    font-size: ").concat(P,"\n  "))}),x||E):[]])):"multipart"in t?function(t){return t.dataLayout,Sf.create("g",[])}(t):void 0;var e,r,n,i,u,a,c,s,f,l,y,p,h,b,v,m,d,g,w,O,S,j,P,k,L,x,E})),r?Dl(r):[],Dl(i||n)])}function Nl(t){var e,r,n,o,i=t.headLayout,u=t.measuresLayouts;return Sf.create("g",[i?(e=i,r=e.partNamesLayouts,n=e.bracesLayouts,o=function(t){return"\n    font-family: ".concat(t.family,"\n    font-size: ").concat(t.size,"\n    text-anchor: end\n    alignment-baseline: middle\n  ")},Sf.create("g",[r.map((function(t){return Sf("text",Yf(Yf({},t.x2cy),{},{style:o(t)}),t.text)})),n?n.map((function(t){return Xf(t)})):[]])):[],u.map((function(t){return r=(e=t).cellsLayouts,n=e.leftBarLayouts,o=e.rightBarLayouts,Sf.create("g",[r.map((function(t){return Al(t)})),n?n.map((function(t){return Dl(t)})):[],o?o.map((function(t){return Dl(t)})):[]]);var e,r,n,o}))])}function Bl(t){var e=t.systemsLayouts;return Sf.create("g",[e.map((function(t){return Nl(t)}))])}function zl(t){return(zl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Cl(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ml(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Ql(n.key),n)}}function Fl(t,e,r){return(e=Ql(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Ql(t){var e=function(t,e){if("object"!==zl(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==zl(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===zl(e)?e:String(e)}var Gl,Wl,Jl=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Cl(this,t),Fl(this,"toJSON",v("head","body")),this.name="score","string"==typeof e?this.parse(new I(e)):(this.head=new Z(e.head),this.body=new Yr(e.body)),this.style=new En(Rn),this.player=new wn(this)}var e,r,n;return e=t,(r=[{key:"parse",value:function(t){t.skipWhite(),this.head=new Z(t),this.body=new Yr(t)}},{key:"addStyle",value:function(){var t=this,e=Array.from(arguments);return e.forEach((function(e){return t.style.add(e)})),this}},{key:"render",value:function(){return function(t){t.innerLayout;var e,r,n,o=t.headLayout,i=t.bodyLayout;return Sf.create("svg",t.wh,[(e=t,r="gray",n="\n    stroke-width: 0.8\n    stroke: ".concat(r||"red","\n    stroke-dasharray: 2 1\n    stroke-opacity: 0.8\n    fill: none\n  "),Sf("rect",Bf(Bf({},e.rect),{},{style:n}))),Gf(o),Bl(i)])}(new $s(this))}},{key:"play",value:function(){this.player.play()}},{key:"pause",value:function(){this.player.pause()}},{key:"stop",value:function(){this.player.stop()}},{key:"toString",value:function(){return[this.head,this.body].join("\n\n")}}])&&Ml(e.prototype,r),n&&Ml(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),ql=(r(0),document.getElementById("sheet-inputs")),Il=ql.elements,Vl=document.getElementById("sheet"),Ul=document.getElementById("help-modal"),Kl=Array.prototype.filter.call(document.getElementsByTagName("style"),(function(t){return t.innerText.includes("Cadence")}))[0];function Xl(){Gl&&Gl.stop(),Wl&&Vl.removeChild(Wl);var t="\ntitle: ".concat(Il.title.value,"\nsubtitle: ").concat(Il.subtitle.value,"\ncomposer: ").concat(Il.composer.value,"\narranger: Yuqi Wang\nlyricist: ").concat(Il.lyricist.value,"\n"),e=Hl(Il.tempo.value)+"".concat(Il.beats_1.value,"/").concat(Il.beats_2.value)+Hl(Il.strength.value),r="\n".concat(Il.notations.value,"\nlyrics1:\n").concat(Il.lyrics1.value,"\nlyrics2:\n").concat(Il.lyrics2.value,"\n");try{(Gl=new Jl(t+e+r)).addStyle("\n      score {\n        width: 800px\n      }\n    "),Wl=Gl.render()}catch(t){(Wl=document.createElementNS("http://www.w3.org/2000/svg","svg")).setAttribute("width","800"),Wl.setAttribute("height","300");var n=document.createElementNS("http://www.w3.org/2000/svg","rect");n.setAttribute("width","100%"),n.setAttribute("height","100%"),n.setAttribute("style","stroke-width: 0.8;stroke: gray;stroke-dasharray: 2 1;stroke-opacity: 0.8;fill: none"),Wl.appendChild(n);var o=document.createElementNS("http://www.w3.org/2000/svg","text");o.setAttribute("x","50%"),o.setAttribute("y","50%"),o.setAttribute("text-anchor","middle"),o.setAttribute("dominant-baseline","middle"),o.setAttribute("font-size","30"),o.innerHTML="简谱格式有误";var i=document.createElementNS("http://www.w3.org/2000/svg","text");i.setAttribute("x","50%"),i.setAttribute("y","60%"),i.setAttribute("text-anchor","middle"),i.setAttribute("dominant-baseline","middle"),i.setAttribute("font-size","20"),i.setAttribute("font-family","monospace"),i.innerHTML=t.message,Wl.appendChild(o),Wl.appendChild(i)}var u=document.createElementNS("http://www.w3.org/2000/svg","defs"),a=document.createElementNS("http://www.w3.org/2000/svg","style");a.innerHTML=Kl.innerText,u.appendChild(a),Wl.insertBefore(u,Wl.firstChild),Vl.appendChild(Wl)}function Hl(t){return t?"/"+t:""}document.getElementById("btn-play").addEventListener("click",(function(){Gl.play()})),document.getElementById("btn-stop").addEventListener("click",(function(){Gl.stop()})),document.getElementById("btn-clear").addEventListener("click",(function(){ql.reset(),Xl()})),document.getElementById("btn-export").addEventListener("click",(function(){var t=(new XMLSerializer).serializeToString(Wl),e=new Blob([t],{type:"image/svg+xml;charset=utf-8"}),r=URL.createObjectURL(e),n=new Image;n.onload=function(){var t=document.createElement("canvas");t.width=2*n.width,t.height=2*n.height;var e=t.getContext("2d");e.fillStyle="#fff",e.fillRect(0,0,2*n.width,2*n.height),e.drawImage(n,0,0,2*n.width,2*n.height),URL.revokeObjectURL(r);var o=t.toDataURL("image/png"),i=document.createElement("a");i.download="image.png",i.href=o,i.click()},n.src=r})),document.getElementById("btn-preset").addEventListener("click",(function(){Il.title.value="Ode an die Freude",Il.subtitle.value="欢乐颂",Il.composer.value="Beethoven",Il.lyricist.value="Schiller",Il.tempo.value="Presto",Il.beats_1.value="4",Il.beats_2.value="4",Il.strength.value="mf",Il.notations.value="3 3 4 5| 5 4 3 2| 1 1 2 3| 3. 2_ 2-|\n3 3 4 5| 5 4 3 2| 1 1 2 3| 2. 1_ 1-|\n2 2 3 1|2 (3_4_)3 1| 2 (3_4_) 3 2| 1 2 5 (3|\n3) 3 4 5|(5 4) (3 4_2_)| 1 1 2 3| 2.1_ 1-|]",Il.lyrics1.value="Joy +1 bril-liant spark of rhe gods daugh-ter of E-ly+1 sium, \nheaven-ly being, we enter your sanc-wary in-to-xica-ted\nwith +1 fine your spells reuhile that which was strict-ly\ndi-vi-ded by con-ven-tion all men be-come  bro-thers where your gen-tle wing rests",Il.lyrics2.value="欢乐女神 圣洁美丽 灿烂光芒照大地\n我们心中充满热情 来到你的圣殿里\n你的力量能使人们 消除一切分+1歧\n在你光辉照-1耀下-1面 人们团结成-1兄弟",Xl()})),Xl(),Array.prototype.forEach.call(ql,(function(t){"SELECT"==t.tagName?t.addEventListener("change",Xl):t.addEventListener("input",Xl)})),document.getElementById("btn-help").addEventListener("click",(function(){Ul.style.display="flex"})),Ul.addEventListener("click",(function(){Ul.style.display="none"}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,